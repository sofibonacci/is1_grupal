

----QUIT----(12 May 2023 17:49:00) CuisUniversity-5799.image priorSource: 4801971!

----STARTUP---- (12 May 2023 17:49:01) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5799.image!


----QUIT----(12 May 2023 17:49:01) CuisUniversity-5799.image priorSource: 9222569!

----STARTUP---- (15 May 2023 09:00:49) as /home/iboaretto/Downloads/linux64/CuisUniversity-5799.image!


----End fileIn of /home/iboaretto/Downloads/MarsRover.st----!

----SNAPSHOT----(15 May 2023 09:01:23) CuisUniversity-5799.image priorSource: 9222790!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 09:01:33'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 09:01:33'!
PASSED!
!MarsRover methodsFor: 'accesing' stamp: 'IB 5/15/2023 09:01:55' prior: 50620299!
direction

	^direction! !
!MarsRover methodsFor: 'accesing' stamp: 'IB 5/15/2023 09:02:25'!
currentPosition
 	^position! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619920!
test05CanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619890!
test02CanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619990!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #S.
	
	marsRover executeAllIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620160!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #W.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620030!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #E.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover direction equals: #E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619880!
test01EmptyCommandListDoesntMoveRover

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: ''.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619940!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619980!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #S.
	
	marsRover executeAllIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620110!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619900!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620120!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #S.
	
	marsRover executeAllIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619970!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #S.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619950!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'fb'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619960!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'bf'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620140!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #E.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620050!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #W.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover direction equals: #W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619910!
test04CanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620010!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #S.
	
	marsRover executeAllIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620040!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #E.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover direction equals: #E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620100!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #E.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620150!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #S.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620060!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #W.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover direction equals: #W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50619930!
test06CanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620080!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #S.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #E.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620020!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #S.
	
	marsRover executeAllIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620070!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #W.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620000!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #S.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620090!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #W.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620170!
test29CanMoveRightRightWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'rr'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:02:25' prior: 50620130!
test25CanMoveRightWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: #N.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #E.! !

!methodRemoval: MarsRover #position stamp: 'IB 5/15/2023 09:02:25'!
position
 	^position!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 09:02:27'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 09:02:27'!
PASSED!
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:03:19' prior: 50620289!
moveRightWithDirection: aDirection

	aDirection = #N ifTrue: [^direction := #E.].
	aDirection = #E ifTrue: [^direction := #S.].	
	aDirection = #S ifTrue: [^direction := #W.].	
	aDirection = #W ifTrue: [^direction := #N.].
! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:03:39' prior: 50620203!
initializePlacedAt: aPosition facingAt: aDirection

	position := aPosition.
	direction := aDirection
! !

!classRenamed: #CardinalPoints as: #CardinalPoint stamp: 'IB 5/15/2023 09:14:12'!
Smalltalk renameClassNamed: #CardinalPoints as: #CardinalPoint!

CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'IB 5/15/2023 09:14:20'!
CardinalPoint subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'IB 5/15/2023 09:14:24'!
CardinalPoint subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'IB 5/15/2023 09:14:30'!
CardinalPoint subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'IB 5/15/2023 09:14:35'!
CardinalPoint subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:14:44' prior: 50620240!
moveBackwardsOneTimeFacingEast

	^ position := position + (-1@0)! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:16:17' prior: 50620209!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:directionToMove | 
		
			directionToMove = $l ifTrue: [
				self moveLeftWithDirection: direction.
				].
			
			directionToMove = $r ifTrue: [
				self moveRightWithDirection: direction.
				].
			
			directionToMove = $f ifTrue: [
				self moveForwardOneTime.
			].
			
			directionToMove = $b ifTrue: [
				(direction = #N) ifTrue: [self moveBackwardsOneTimeFacingNorth].
				(direction = #S) ifTrue: [self moveBackwardsOneTimeFacingSouth].
				(direction = #E) ifTrue: [self moveBackwardsOneTimeFacingEast].
				(direction = #W) ifTrue: [self moveBackwardsOneTimeFacingWest].
				].
			].
! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:17:20' prior: 50620934!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:directionToMove | 
		
			directionToMove = $l ifTrue: [
				self moveLeftWithDirection: direction.
				].
			
			directionToMove = $r ifTrue: [
				self moveRightWithDirection: direction.
				].
			
			directionToMove = $f ifTrue: [
				position := position + direction directionToMoveForward.
			].
			
			directionToMove = $b ifTrue: [
				(direction = #N) ifTrue: [self moveBackwardsOneTimeFacingNorth].
				(direction = #S) ifTrue: [self moveBackwardsOneTimeFacingSouth].
				(direction = #E) ifTrue: [self moveBackwardsOneTimeFacingEast].
				(direction = #W) ifTrue: [self moveBackwardsOneTimeFacingWest].
				].
			].
! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:17:44' prior: 50620959!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:directionToMove | 
		
			directionToMove = $l ifTrue: [
				self moveLeftWithDirection: direction.
				].
			
			directionToMove = $r ifTrue: [
				self moveRightWithDirection: direction.
				].
			
			directionToMove = $f ifTrue: [
				position := position + direction directionToMoveForward.
			].
			
			directionToMove = $b ifTrue: [
				position := position + direction directionToMoveBackwards.].
			].
! !
!CardinalPoint methodsFor: 'no messages' stamp: 'IB 5/15/2023 09:18:47'!
directionToMoveForward

	self subclassResponsibility! !
!East methodsFor: 'no messages' stamp: 'IB 5/15/2023 09:19:12' overrides: 50621003!
directionToMoveForward

	^ 1@0! !
!North methodsFor: 'no messages' stamp: 'IB 5/15/2023 09:19:38' overrides: 50621003!
directionToMoveForward

	^ 0@1! !
!South methodsFor: 'no messages' stamp: 'IB 5/15/2023 09:19:52' overrides: 50621003!
directionToMoveForward

	^ 0@-1! !
!West methodsFor: 'no messages' stamp: 'IB 5/15/2023 09:20:14' overrides: 50621003!
directionToMoveForward

	^ -1@0! !
!East methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:20:41'!
directionToMoveBackwards

	^ -1@0! !
!North methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:20:50'!
directionToMoveBackwards

	^ 0@-1! !
!South methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:20:56'!
directionToMoveBackwards

	^ 0@1! !
!West methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:21:03'!
directionToMoveBackwards

	^ 1@0! !

0@1!

self not!

self negated!
!North methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:22:09' prior: 50621028!
directionToMoveBackwards

	^ self directionToMoveForward negated! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:22:15'!
directionToMoveBackwards

	^ self directionToMoveForward negated! !

!methodRemoval: East #directionToMoveBackwards stamp: 'IB 5/15/2023 09:22:25'!
directionToMoveBackwards

	^ -1@0!

!methodRemoval: North #directionToMoveBackwards stamp: 'IB 5/15/2023 09:22:34'!
directionToMoveBackwards

	^ self directionToMoveForward negated!

!methodRemoval: South #directionToMoveBackwards stamp: 'IB 5/15/2023 09:22:39'!
directionToMoveBackwards

	^ 0@1!

!methodRemoval: West #directionToMoveBackwards stamp: 'IB 5/15/2023 09:22:44'!
directionToMoveBackwards

	^ 1@0!

----SNAPSHOT----(15 May 2023 09:22:56) CuisUniversity-5799.image priorSource: 9237451!
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:24:35'!
moveTowards: aDirection
				
	position := position + aDirection! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:24:43' prior: 50621069!
moveTowards: aDirection
				
	position := position + aDirection! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:25:00' prior: 50620985!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:directionToMove | 
		
			directionToMove = $l ifTrue: [
				self moveLeftWithDirection: direction.
				].
			
			directionToMove = $r ifTrue: [
				self moveRightWithDirection: direction.
				].
			
			directionToMove = $f ifTrue: [
				self moveTowards: direction directionToMoveForward.
			].
			
			directionToMove = $b ifTrue: [
				self moveTowards: direction directionToMoveBackwards.].
			].
! !

!methodRemoval: MarsRover #moveForwardOneTimeFacingWest stamp: 'IB 5/15/2023 09:25:14'!
moveForwardOneTimeFacingWest
	^position := position + (-1@0).!

!methodRemoval: MarsRover #moveForwardOneTimeFacingSouth stamp: 'IB 5/15/2023 09:25:18'!
moveForwardOneTimeFacingSouth

	^ position := position + (0@-1)!

!methodRemoval: MarsRover #moveForwardOneTimeFacingNorth stamp: 'IB 5/15/2023 09:25:21'!
moveForwardOneTimeFacingNorth

	^ position := position + (0@1)!

!methodRemoval: MarsRover #moveBackwardsOneTimeFacingWest stamp: 'IB 5/15/2023 09:25:24'!
moveBackwardsOneTimeFacingWest
	^position := position + (1@0).!

!methodRemoval: MarsRover #moveForwardOneTimeFacingEast stamp: 'IB 5/15/2023 09:25:26'!
moveForwardOneTimeFacingEast
	^ position := position + (1@0).!

!methodRemoval: MarsRover #moveBackwardsOneTimeFacingSouth stamp: 'IB 5/15/2023 09:25:29'!
moveBackwardsOneTimeFacingSouth

	^ position := position + (0@1)!

!methodRemoval: MarsRover #moveBackwardsOneTimeFacingNorth stamp: 'IB 5/15/2023 09:25:33'!
moveBackwardsOneTimeFacingNorth

	^ position := position + (0@-1)!

!methodRemoval: MarsRover #moveBackwardsOneTimeFacingEast stamp: 'IB 5/15/2023 09:25:36'!
moveBackwardsOneTimeFacingEast

	^ position := position + (-1@0)!
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:26:18' prior: 50621079!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:directionToMove | 
		
			directionToMove = $l ifTrue: [
				self moveLeftWithDirection: direction.
			].
			
			directionToMove = $r ifTrue: [
				self moveRightWithDirection: direction.
			].
			
			directionToMove = $f ifTrue: [
				self moveTowards: direction directionToMoveForward.
			].
			
			directionToMove = $b ifTrue: [
				self moveTowards: direction directionToMoveBackwards.].
			].
! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:26:23' prior: 50621136!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:directionToMove | 
		
			directionToMove = $l ifTrue: [
				self moveLeftWithDirection: direction.
			].
			
			directionToMove = $r ifTrue: [
				self moveRightWithDirection: direction.
			].
			
			directionToMove = $f ifTrue: [
				self moveTowards: direction directionToMoveForward.
			].
			
			directionToMove = $b ifTrue: [
				self moveTowards: direction directionToMoveBackwards.].
	]
! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:27:29' prior: 50621154!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:directionToMove | 
		
			directionToMove = $l ifTrue: [
				self rotateLeft.
			].
			
			directionToMove = $r ifTrue: [
				self rotateRight.
			].
			
			directionToMove = $f ifTrue: [
				self moveTowards: direction directionToMoveForward.
			].
			
			directionToMove = $b ifTrue: [
				self moveTowards: direction directionToMoveBackwards.].
	]
! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 09:27:51'!
rotateLeft

	direction = #N ifTrue: [^direction := #W].
	direction = #S ifTrue: [^direction := #E].
	direction = #E ifTrue: [^direction := #N].
	direction = #W ifTrue: [^direction := #S].! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 09:28:08'!
rotateRight

	direction = #N ifTrue: [^direction := #E.].
	direction = #E ifTrue: [^direction := #S.].	
	direction = #S ifTrue: [^direction := #W.].	
	direction = #W ifTrue: [^direction := #N.].
! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:30:53'!
nextCardinalPointClockwise

	^self subclassResponsibility! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:30:57' prior: 50621206!
nextCardinalPointClockwise

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:31:07'!
nextCardinalPoint

	self subclassResponsibility! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:31:15'!
previousCardinalPoint

	self subclassResponsibility! !

!methodRemoval: CardinalPoint #nextCardinalPointClockwise stamp: 'IB 5/15/2023 09:31:19'!
nextCardinalPointClockwise

	self subclassResponsibility!
!East methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:32:01' overrides: 50621216!
nextCardinalPoint

	^ East new! !
!East methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:32:23' prior: 50621231 overrides: 50621216!
nextCardinalPoint

	^ South new! !
!North methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:32:33' overrides: 50621216!
nextCardinalPoint

	^ East new! !
!South methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:32:47' overrides: 50621216!
nextCardinalPoint

	^ West new! !
!West methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:32:59' overrides: 50621216!
nextCardinalPoint

	^ North new! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:34:24' prior: 50621221!
previousCardinalPoint

	^self nextCardinalPoint nextCardinalPoint nextCardinalPoint! !

----SNAPSHOT----(15 May 2023 09:34:33) CuisUniversity-5799.image priorSource: 9261294!
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 09:34:53' prior: 50621197!
rotateRight

	direction := direction nextCardinalPoint
! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 09:35:07' prior: 50621188!
rotateLeft

	direction := direction previousCardinalPoint ! !

!methodRemoval: MarsRover #moveRightWithDirection: stamp: 'IB 5/15/2023 09:35:12'!
moveRightWithDirection: aDirection

	aDirection = #N ifTrue: [^direction := #E.].
	aDirection = #E ifTrue: [^direction := #S.].	
	aDirection = #S ifTrue: [^direction := #W.].	
	aDirection = #W ifTrue: [^direction := #N.].
!

!methodRemoval: MarsRover #moveLeftWithDirection: stamp: 'IB 5/15/2023 09:35:16'!
moveLeftWithDirection: aDirection
	aDirection = #N ifTrue: [^direction := #W].
	aDirection = #S ifTrue: [^direction := #E].
	aDirection = #E ifTrue: [^direction := #N].
	aDirection = #W ifTrue: [^direction := #S].!
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:35:38' prior: 50621172!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:directionToMove | 
		
			directionToMove = $l ifTrue: [
				self rotateLeft.
			].
			
			directionToMove = $r ifTrue: [
				self rotateRight.
			].
			
			directionToMove = $f ifTrue: [
				self moveTowards: direction directionToMoveForward.
			].
			
			directionToMove = $b ifTrue: [
				self moveTowards: direction directionToMoveBackwards.
			].
	]
! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:36:52' prior: 50620486!
test01EmptyCommandListDoesntMoveRover

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: ''.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:36:59' prior: 50620442!
test02CanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover direction equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:03' prior: 50620531!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:05' prior: 50621330!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover direction equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:10' prior: 50620608!
test04CanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover direction equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:14' prior: 50620431!
test05CanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover direction equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:19' prior: 50620674!
test06CanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover direction equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:23' prior: 50620497!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover direction equals: #N.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:25' prior: 50621387!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover direction equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:30' prior: 50620564!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'fb'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:37' prior: 50620575!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'bf'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:47' prior: 50620553!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover direction equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:37:52' prior: 50620509!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover direction equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:38:01' prior: 50620453!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover direction equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:38:07' prior: 50620719!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover direction equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:38:13' prior: 50620619!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover direction equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:38:19' prior: 50620696!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover direction equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:38:31' prior: 50620475!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover direction equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:38:36' prior: 50620630!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover direction equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:38:45' prior: 50620597!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover direction equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:38:51' prior: 50620663!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover direction equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:39:04' prior: 50620708!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: West new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:39:06' prior: 50621544!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:39:17' prior: 50620685!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:39:27' prior: 50620730!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: South! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:39:41' prior: 50620641!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:39:49' prior: 50620520!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: #S.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:39:55' prior: 50621599!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:40:04' prior: 50620542!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:40:16' prior: 50620752!
test25CanMoveRightWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:40:26' prior: 50620586!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:40:38' prior: 50620652!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:40:49' prior: 50620464!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:40:59' prior: 50620741!
test29CanMoveRightRightWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'rr'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: South new! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 09:41:57'!
FAILURE!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 09:41:59'!
FAILURE!

marsRover direction!

North new!
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:42:59' overrides: 16901772!
= anObject

	^self isKindOf: anObject class

	! !
!CardinalPoint methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:43:10' prior: 50621793 overrides: 16901772!
= anObject

	^anObject isKindOf: self class

	! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:43:14'!
FAILURE!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 09:43:14'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:43:14'!
FAILURE!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:43:23' prior: 50621577!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover direction equals: South new! !

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:43:24'!
PASSED!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 09:43:28'!
PASSED!

----SNAPSHOT----(15 May 2023 09:43:32) CuisUniversity-5799.image priorSource: 9267446!
!MarsRover methodsFor: 'accesing' stamp: 'IB 5/15/2023 09:44:00' prior: 50620427!
currentPosition

 	^position! !

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IB 5/15/2023 09:46:40'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction proceduresByCommand'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:46:38' prior: 50620876!
initializePlacedAt: aPosition facingAt: aDirection

	position := aPosition.
	direction := aDirection.
	proceduresByCommand := Dictionary new 
		at: 'f' put: [self moveTowards: direction directionToMoveForward]; 
		at: 'b' put: [self moveTowards: direction directionToMoveBackwards]; 
		at: 'r' put: [self rotateRight]; 
		at: 'l' put: [self rotateLeft]; 
		yourself! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 09:47:38' prior: 50621291!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:command | (proceduresByCommand at: command) value]
! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 09:47:42'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 09:47:42'!
ERROR!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:47:43'!
ERROR!

marsRover!
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:48:39' prior: 50622036!
initializePlacedAt: aPosition facingAt: aDirection

	position := aPosition.
	direction := aDirection.
	proceduresByCommand := Dictionary new 
		at: $f put: [self moveTowards: direction directionToMoveForward]; 
		at: $b put: [self moveTowards: direction directionToMoveBackwards]; 
		at: $r put: [self rotateRight]; 
		at: $l put: [self rotateLeft]; 
		yourself! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 09:48:44'!
PASSED!

----SNAPSHOT----(15 May 2023 09:48:49) CuisUniversity-5799.image priorSource: 9291843!
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:49:08'!
initializeProceduresByCommand

	^ proceduresByCommand := Dictionary new 
		at: $f put: [self moveTowards: direction directionToMoveForward]; 
		at: $b put: [self moveTowards: direction directionToMoveBackwards]; 
		at: $r put: [self rotateRight]; 
		at: $l put: [self rotateLeft]; 
		yourself! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:49:08' prior: 50622162!
initializePlacedAt: aPosition facingAt: aDirection

	position := aPosition.
	direction := aDirection.
	self initializeProceduresByCommand! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:49:11' prior: 50622291!
initializePlacedAt: aPosition facingAt: aDirection

	position := aPosition.
	direction := aDirection.
	
	self initializeProceduresByCommand! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:49:55'!
moveForward

	^ self moveTowards: direction directionToMoveForward! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:49:55' prior: 50622279!
initializeProceduresByCommand

	^ proceduresByCommand := Dictionary new 
		at: $f put: [self moveForward]; 
		at: $b put: [self moveTowards: direction directionToMoveBackwards]; 
		at: $r put: [self rotateRight]; 
		at: $l put: [self rotateLeft]; 
		yourself! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:50:08'!
moveBackwards

	^ self moveTowards: direction directionToMoveBackwards! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:50:08' prior: 50622311!
initializeProceduresByCommand

	^ proceduresByCommand := Dictionary new 
		at: $f put: [self moveForward]; 
		at: $b put: [self moveBackwards]; 
		at: $r put: [self rotateRight]; 
		at: $l put: [self rotateLeft]; 
		yourself! !

----SNAPSHOT----(15 May 2023 09:50:10) CuisUniversity-5799.image priorSource: 9300019!
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 09:50:48' prior: 50621074!
moveTowards: aDirectionOfMovement
				
	position := position + aDirectionOfMovement! !
!MarsRover methodsFor: 'accesing' stamp: 'IB 5/15/2023 09:52:35'!
cardinalDirection

	^direction! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621443!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621632!
test25CanMoveRightWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621621!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621466!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621500!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621421!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'bf'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621907!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621566!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621341!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621511!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621398!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621522!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621676!
test29CanMoveRightRightWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'rr'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621588!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621432!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621610!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621410!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'fb'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621352!
test04CanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621555!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621319!
test02CanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621375!
test06CanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621477!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621654!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621454!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621665!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621643!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621533!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621308!
test01EmptyCommandListDoesntMoveRover

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: ''.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621488!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 09:52:35' prior: 50621364!
test05CanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover cardinalDirection equals: North new.! !

!methodRemoval: MarsRover #direction stamp: 'IB 5/15/2023 09:52:35'!
direction

	^direction!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IB 5/15/2023 09:52:42'!
Object subclass: #MarsRover
	instanceVariableNames: 'position direction proceduresByCommand cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'accesing' stamp: 'IB 5/15/2023 09:52:40' prior: 50622346!
cardinalDirection

	^cardinalDirection! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 09:52:48' prior: 50622322!
moveBackwards

	^ self moveTowards: cardinalDirection directionToMoveBackwards! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 09:52:51' prior: 50622306!
moveForward

	^ self moveTowards: cardinalDirection directionToMoveForward! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 09:52:58' prior: 50621267!
rotateLeft

	cardinalDirection := cardinalDirection previousCardinalPoint ! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 09:53:04' prior: 50621262!
rotateRight

	cardinalDirection := cardinalDirection nextCardinalPoint
! !
!MarsRover methodsFor: 'initialization' stamp: 'IB 5/15/2023 09:53:10' prior: 50622299!
initializePlacedAt: aPosition facingAt: aDirection

	position := aPosition.
	cardinalDirection := aDirection.
	
	self initializeProceduresByCommand! !

Object subclass: #MarsRover
	instanceVariableNames: 'position proceduresByCommand cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'IB 5/15/2023 09:53:16'!
Object subclass: #MarsRover
	instanceVariableNames: 'position proceduresByCommand cardinalDirection'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 09:53:20'!
PASSED!

----SNAPSHOT----(15 May 2023 09:53:23) CuisUniversity-5799.image priorSource: 9301987!

!classDefinition: #InvalidCommand category: 'MarsRover' stamp: 'IB 5/15/2023 09:58:50'!
Error subclass: #InvalidCommand
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 09:58:39'!
test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	self should: [marsRover executeAllIn: 'x'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@0.
			self assert: marsRover cardinalDirection equals: North new]! !
!InvalidCommand methodsFor: 'no messages' stamp: 'IB 5/15/2023 09:59:41' overrides: 16849791!
messageText

	^'An invalid command was found'! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 10:01:41' prior: 50622051!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:command | proceduresByCommand at: command value ifPresent: [:procedure | procedure value] ifAbsent: [InvalidCommand signal]]
! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:01:44'!
PASSED!

----SNAPSHOT----(15 May 2023 10:01:48) CuisUniversity-5799.image priorSource: 9318984!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:10:08'!
test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	self should: [marsRover executeAllIn: 'xf'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@0.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:10:16'!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	self should: [marsRover executeAllIn: 'xf'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@0.
			self assert: marsRover cardinalDirection equals: North new]! !

!methodRemoval: MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:10:16'!
test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	self should: [marsRover executeAllIn: 'xf'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@0.
			self assert: marsRover cardinalDirection equals: North new]!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:10:23'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:10:48'!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	self should: [marsRover executeAllIn: 'fx'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@0.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:10:55' prior: 50623072!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	self should: [marsRover executeAllIn: 'fx'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@1.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:12:49'!
test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	self should: [marsRover executeAllIn: 'fx'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@1.
			self assert: marsRover cardinalDirection equals: North new]! !

!methodRemoval: MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:12:49'!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: North new.
	
	self should: [marsRover executeAllIn: 'fx'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@1.
			self assert: marsRover cardinalDirection equals: North new]!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:12:51'!
PASSED!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:12:55'!
PASSED!

----SNAPSHOT----(15 May 2023 10:12:58) CuisUniversity-5799.image priorSource: 9323612!
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 10:13:49' prior: 50622900!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:command | 
		proceduresByCommand at: command value 
			ifPresent: [:procedure | procedure value] 
			ifAbsent: [InvalidCommand signal]]
! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 10:15:18'!
rotateTo: aCardinalDirection

	cardinalDirection := aCardinalDirection ! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 10:15:30' prior: 50622742!
rotateRight

	self rotateTo: cardinalDirection nextCardinalPoint
! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 10:15:37' prior: 50622737!
rotateLeft

	self rotateTo: cardinalDirection previousCardinalPoint ! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 10:16:01' prior: 50622732!
moveForward

	self moveTowards: cardinalDirection directionToMoveForward! !
!MarsRover methodsFor: 'movement' stamp: 'IB 5/15/2023 10:16:05' prior: 50622726!
moveBackwards

	self moveTowards: cardinalDirection directionToMoveBackwards! !

----SNAPSHOT----(15 May 2023 10:16:50) CuisUniversity-5799.image priorSource: 9331392!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:17:45'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:17:45'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39'!
marsRoverFacingNorth

	^ MarsRover placedAt: 0@0 facingAt: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622878!
test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllIn: 'x'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@0.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622699!
test05CanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622555!
test04CanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50623033!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllIn: 'xf'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@0.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622675!
test01EmptyCommandListDoesntMoveRover

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: ''.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622411!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'bf'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622363!
test25CanMoveRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622567!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622471!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622531!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622543!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'fb'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622447!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622495!
test29CanMoveRightRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'rr'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622579!
test02CanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50623105!
test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllIn: 'fx'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@1.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:18:39' prior: 50622591!
test06CanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 10:19:16'!
executeAllCommandsIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:command | 
		proceduresByCommand at: command value 
			ifPresent: [:procedure | procedure value] 
			ifAbsent: [InvalidCommand signal]]
! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623471!
test01EmptyCommandListDoesntMoveRover

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: ''.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622603!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllCommandsIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622399!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622375!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllCommandsIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622651!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622483!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622387!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623581!
test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllCommandsIn: 'fx'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@1.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623570!
test02CanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623482!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'bf'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622507!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622519!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622663!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623416!
test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllCommandsIn: 'x'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@0.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623526!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622639!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622423!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: West new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622435!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623548!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622687!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllCommandsIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622615!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623443!
test04CanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622627!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllCommandsIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623454!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllCommandsIn: 'xf'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: 0@0.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623559!
test29CanMoveRightRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'rr'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623515!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623504!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623537!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'fb'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623493!
test25CanMoveRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622459!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: East new.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623432!
test05CanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50623597!
test06CanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:19:16' prior: 50622351!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: 0@0 facingAt: South new.
	
	marsRover executeAllCommandsIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover cardinalDirection equals: South new! !

!methodRemoval: MarsRover #executeAllIn: stamp: 'IB 5/15/2023 10:19:16'!
executeAllIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:command | 
		proceduresByCommand at: command value 
			ifPresent: [:procedure | procedure value] 
			ifAbsent: [InvalidCommand signal]]
!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51'!
marsRoverInitialPosition

	^ 0@0! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623891!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'fff'.
	
	self assert: marsRover currentPosition equals: 0@-3.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623690!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assert: marsRover currentPosition equals: 0@1.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623855!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'bbb'.
	
	self assert: marsRover currentPosition equals: 0@3.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623642!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623619!
test01EmptyCommandListDoesntMoveRover

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: ''.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623903!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllCommandsIn: 'xf'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623743!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50624120!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623731!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'bf'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623944!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50624014!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'ff'.
	
	self assert: marsRover currentPosition equals: 0@-2.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623796!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'll'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623767!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assert: marsRover currentPosition equals: 1@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623630!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'bb'.
	
	self assert: marsRover currentPosition equals: 0@2.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623779!
test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllCommandsIn: 'x'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
			self assert: marsRover cardinalDirection equals: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623755!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assert: marsRover currentPosition equals: 0@-1.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623831!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50624249!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623654!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'll'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50624274!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'll'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623819!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50624299!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623867!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50624324!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623967!
test25CanMoveRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623978!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover cardinalDirection equals: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623955!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'fb'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: North new.! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623920!
test29CanMoveRightRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'rr'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623411!
marsRoverFacingNorth

	^ MarsRover placedAt: self marsRoverInitialPosition facingAt: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623678!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assert: marsRover currentPosition equals: -1@0.
	self assert: marsRover cardinalDirection equals: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623807!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50624415!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50623666!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: 0@0.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:19:51' prior: 50624440!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assert: marsRover currentPosition equals: self marsRoverInitialPosition.
	self assert: marsRover cardinalDirection equals: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:22:15'!
assertMarsRover: aMarsRover isPlacedAt: aPosition andFacing: aCardinalDirection
	
	self assert: aMarsRover currentPosition equals: aPosition.
	self assert: aMarsRover cardinalDirection equals: aCardinalDirection! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:22:43' prior: 50624090!
test01EmptyCommandListDoesntMoveRover

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: ''.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:23:05' prior: 50623719!
test02CanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:23:24' prior: 50623843!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'ff'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: North new! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:23:25'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:23:25'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:23:42' prior: 50623879!
test04CanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'fff'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:23:56' prior: 50623990!
test05CanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:24:09' prior: 50624002!
test06CanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'bb'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:24:22' prior: 50623932!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'bbb'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:24:35' prior: 50624373!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'fb'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:24:55' prior: 50624145!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'bf'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:25:19' prior: 50624236!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:25:29' prior: 50624169!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'ff'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:25:44' prior: 50624039!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'fff'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:25:55' prior: 50624052!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:26:04' prior: 50624206!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'bb'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:26:15' prior: 50624065!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'bbb'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:26:42' prior: 50624078!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:26:59' prior: 50624361!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:27:13' prior: 50624403!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:27:28' prior: 50624194!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:27:44' prior: 50624157!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:27:58' prior: 50624261!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:28:16' prior: 50624311!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:28:28' prior: 50624132!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:28:39' prior: 50624182!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'll'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:28:54' prior: 50624286!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'll'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:29:34' prior: 50624349!
test25CanMoveRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:30:00' prior: 50624452!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: East new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:30:28' prior: 50624336!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: South new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:30:48' prior: 50624427!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := MarsRover placedAt: self marsRoverInitialPosition facingAt: West new.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:31:01' prior: 50624385!
test29CanMoveRightRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: 'rr'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:31:23' prior: 50624219!
test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllCommandsIn: 'x'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:31:48' prior: 50624102!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllCommandsIn: 'xf'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:32:02' prior: 50623702!
test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self should: [marsRover executeAllCommandsIn: 'fx'] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: North new]! !

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:32:04'!
PASSED!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:32:06'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:32:07'!
PASSED!

----SNAPSHOT----(15 May 2023 10:32:09) CuisUniversity-5799.image priorSource: 9332623!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:34:27'!
executingAllCommandsIn: aCommandList in: aMarsRover shouldFailAndLeaveMarsRoverPlacedAt: aPosition facing: aCardinalDirection
	
	self should: [aMarsRover executeAllCommandsIn: aCommandList] 
		raise: InvalidCommand
		withExceptionDo: [:signal | self assert: signal messageText equals: 'An invalid command was found'.
			self assertMarsRover: aMarsRover isPlacedAt: aPosition andFacing: aCardinalDirection]! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:35:17' prior: 50624918!
test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self executingAllCommandsIn: 'x' 
		in: marsRover 
		shouldFailAndLeaveMarsRoverPlacedAt: self marsRoverInitialPosition 
		facing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:35:33' prior: 50624934!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self executingAllCommandsIn: 'xf' 
		in: marsRover 
		shouldFailAndLeaveMarsRoverPlacedAt: self marsRoverInitialPosition 
		facing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:35:59' prior: 50624950!
test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self executingAllCommandsIn: 'fx' 
		in: marsRover 
		shouldFailAndLeaveMarsRoverPlacedAt: 0@1 
		facing: North new! !

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:36:12'!
PASSED!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:36:18'!
PASSED!

----SNAPSHOT----(15 May 2023 10:36:21) CuisUniversity-5799.image priorSource: 9389801!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:36:48'!
marsRoverFacingWest

	^ MarsRover placedAt: self marsRoverInitialPosition facingAt: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:36:48' prior: 50624781!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:36:48' prior: 50624814!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:36:48' prior: 50624770!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:36:48' prior: 50624895!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06'!
marsRoverFacingSouth

	^ MarsRover placedAt: self marsRoverInitialPosition facingAt: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06' prior: 50624802!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06' prior: 50624849!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: 'll'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06' prior: 50624692!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: 'ff'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06' prior: 50624714!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06' prior: 50624736!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: 'bbb'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06' prior: 50624883!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06' prior: 50624725!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: 'bb'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06' prior: 50624681!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:06' prior: 50624703!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: 'fff'.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:23'!
marsRoverFacingEast

	^ MarsRover placedAt: self marsRoverInitialPosition facingAt: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:23' prior: 50624826!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: 'l'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:23' prior: 50624871!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: 'r'.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:23' prior: 50624759!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: 'b'.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:37:23' prior: 50624748!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: 'f'.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:39:21'!
commandToMoveForwardOneTime

	^ 'f'! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:39:21' prior: 50625433!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:39:21' prior: 50624486!
test02CanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:39:21' prior: 50625377!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:39:21' prior: 50625280!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:39:44'!
commandToMoveForwardTwoTimes

	^ 'ff'! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:39:44' prior: 50625327!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:39:44' prior: 50624496!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:03'!
commandToMoveForwardThreeTimes

	^ 'fff'! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:03' prior: 50624619!
test04CanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:03' prior: 50625387!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:27'!
commandToMoveBackwardsOneTime

	^ 'b'! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:27' prior: 50625260!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwardsOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:27' prior: 50624629!
test05CanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwardsOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:27' prior: 50625337!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwardsOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:27' prior: 50625423!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwardsOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:43'!
commandToMoveBackwardsTwoTimes

	^ 'bb'! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:43' prior: 50625367!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwardsTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:40:43' prior: 50624639!
test06CanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwardsTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:41:00'!
commandToMoveBackwardsThreeTimes

	^ 'bbb'! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:41:00' prior: 50624649!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwardsThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:41:00' prior: 50625347!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwardsThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: South new! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:41:47'!
PASSED!

'b','b'!
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:42:42' prior: 50625588!
commandToMoveBackwardsTwoTimes

	^ self commandToMoveBackwardsOneTime , self commandToMoveBackwardsOneTime! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:42:44'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:42:44'!
PASSED!
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:43:05' prior: 50625614!
commandToMoveBackwardsThreeTimes

	^ self commandToMoveBackwardsTwoTimes , self commandToMoveBackwardsOneTime! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:43:07'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:43:07'!
PASSED!
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:43:35' prior: 50625489!
commandToMoveForwardTwoTimes

	^ self commandToMoveForwardOneTime , self commandToMoveForwardOneTime! !
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:43:49' prior: 50625514!
commandToMoveForwardThreeTimes

	^ self commandToMoveForwardTwoTimes , self commandToMoveForwardOneTime! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:43:53'!
PASSED!

----SNAPSHOT----(15 May 2023 10:43:56) CuisUniversity-5799.image priorSource: 9395233!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:44:57' prior: 50624659!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardOneTime , self commandToMoveBackwardsOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:44:59'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:44:59'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:45:35' prior: 50624670!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwardsOneTime , self commandToMoveForwardOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:45:44'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:45:44'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:46:12'!
commandToRotateLeftOneTime

	^ 'l'! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:46:12' prior: 50624792!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeftOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:46:12' prior: 50625306!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeftOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:46:12' prior: 50625403!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateLeftOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:46:12' prior: 50625270!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateLeftOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:46:31' prior: 50624838!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeftOneTime, self commandToRotateLeftOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:46:32'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:46:32'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:46:43' prior: 50625316!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeftOneTime, self commandToRotateLeftOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:46:45'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:46:45'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:47:03'!
commandToRotateRight

	^ 'r'! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:47:03' prior: 50625357!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:47:03' prior: 50624861!
test25CanMoveRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:47:03' prior: 50625413!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:47:03' prior: 50625290!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:47:18' prior: 50624907!
test29CanMoveRightRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight, self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:47:19'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:47:19'!
PASSED!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:47:44'!
commandToRotateLeft

	^ 'l'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:47:44' prior: 50626556!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft, self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:47:44' prior: 50626394!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:47:44' prior: 50626405!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:47:44' prior: 50626383!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:47:44' prior: 50626416!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:47:44' prior: 50626427!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft, self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !

!methodRemoval: MarsRoverTest #commandToRotateLeftOneTime stamp: 'IB 5/15/2023 10:47:44'!
commandToRotateLeftOneTime

	^ 'l'!
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:48:00'!
commandToMoveBackwards

	^ 'b'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:00' prior: 50626124!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwardOneTime , self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:00' prior: 50625556!
test05CanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:00' prior: 50625755!
commandToMoveBackwardsTwoTimes

	^ self commandToMoveBackwards , self commandToMoveBackwards! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:00' prior: 50625875!
commandToMoveBackwardsThreeTimes

	^ self commandToMoveBackwardsTwoTimes , self commandToMoveBackwards! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:00' prior: 50626250!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards , self commandToMoveForwardOneTime.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:00' prior: 50625545!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:00' prior: 50625567!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:00' prior: 50625578!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: East new! !

!methodRemoval: MarsRoverTest #commandToMoveBackwardsOneTime stamp: 'IB 5/15/2023 10:48:00'!
commandToMoveBackwardsOneTime

	^ 'b'!
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:48:13'!
commandToMoveForwards

	^ 'f'! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:13' prior: 50626941!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards , self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:13' prior: 50625479!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: West new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:13' prior: 50625457!
test02CanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:13' prior: 50626002!
commandToMoveForwardThreeTimes

	^ self commandToMoveForwardTwoTimes , self commandToMoveForwards! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:13' prior: 50625995!
commandToMoveForwardTwoTimes

	^ self commandToMoveForwards , self commandToMoveForwards! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:13' prior: 50625446!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: East new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:13' prior: 50625468!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:13' prior: 50626979!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards , self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!methodRemoval: MarsRoverTest #commandToMoveForwardOneTime stamp: 'IB 5/15/2023 10:48:13'!
commandToMoveForwardOneTime

	^ 'f'!
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:48:23'!
commandsToMoveBackwardsThreeTimes

	^ self commandToMoveBackwardsTwoTimes , self commandToMoveBackwards! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:23' prior: 50625630!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:23' prior: 50625619!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: North new! !

!methodRemoval: MarsRoverTest #commandToMoveBackwardsThreeTimes stamp: 'IB 5/15/2023 10:48:23'!
commandToMoveBackwardsThreeTimes

	^ self commandToMoveBackwardsTwoTimes , self commandToMoveBackwards!
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:48:32'!
commandsToMoveBackwardsTwoTimes

	^ self commandToMoveBackwards , self commandToMoveBackwards! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:32' prior: 50625603!
test06CanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:32' prior: 50625592!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: South new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:32' prior: 50627119!
commandsToMoveBackwardsThreeTimes

	^ self commandsToMoveBackwardsTwoTimes , self commandToMoveBackwards! !

!methodRemoval: MarsRoverTest #commandToMoveBackwardsTwoTimes stamp: 'IB 5/15/2023 10:48:32'!
commandToMoveBackwardsTwoTimes

	^ self commandToMoveBackwards , self commandToMoveBackwards!
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:48:42'!
commandsToMoveForwardThreeTimes

	^ self commandToMoveForwardTwoTimes , self commandToMoveForwards! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:42' prior: 50625519!
test04CanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:42' prior: 50625530!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: South new! !

!methodRemoval: MarsRoverTest #commandToMoveForwardThreeTimes stamp: 'IB 5/15/2023 10:48:42'!
commandToMoveForwardThreeTimes

	^ self commandToMoveForwardTwoTimes , self commandToMoveForwards!
!MarsRoverTest methodsFor: 'support - commands' stamp: 'IB 5/15/2023 10:48:50'!
commandsToMoveForwardTwoTimes

	^ self commandToMoveForwards , self commandToMoveForwards! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:50' prior: 50625504!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: North new! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:50' prior: 50627196!
commandsToMoveForwardThreeTimes

	^ self commandsToMoveForwardTwoTimes , self commandToMoveForwards! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'IB 5/15/2023 10:48:50' prior: 50625493!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: South new! !

!methodRemoval: MarsRoverTest #commandToMoveForwardTwoTimes stamp: 'IB 5/15/2023 10:48:50'!
commandToMoveForwardTwoTimes

	^ self commandToMoveForwards , self commandToMoveForwards!

!testRun: #MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

!testRun: #MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 10:48:56'!
PASSED!

----SNAPSHOT----(15 May 2023 10:48:59) CuisUniversity-5799.image priorSource: 9423046!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:49:29'!
test29CanRotateRightTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight, self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !

!methodRemoval: MarsRoverTest #test29CanMoveRightRightWhenFacingNorth stamp: 'IB 5/15/2023 10:49:29'!
test29CanMoveRightRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight, self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:49:55'!
test28CanRotateRightWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!methodRemoval: MarsRoverTest #test28CanMoveRightWhenFacingWest stamp: 'IB 5/15/2023 10:49:55'!
test28CanMoveRightWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new!

!methodRemoval: MarsRoverTest #test29CanRotateRightTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:50:09'!
test29CanRotateRightTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight, self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:50:24'!
test27CanRotateRightWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !

!methodRemoval: MarsRoverTest #test27CanMoveRightWhenFacingSouth stamp: 'IB 5/15/2023 10:50:24'!
test27CanMoveRightWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:50:37'!
test26CanRotateRightWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !

!methodRemoval: MarsRoverTest #test26CanMoveRightWhenFacingEast stamp: 'IB 5/15/2023 10:50:37'!
test26CanMoveRightWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:50:46'!
test25CanRotateRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !

!methodRemoval: MarsRoverTest #test25CanMoveRightWhenFacingNorth stamp: 'IB 5/15/2023 10:50:46'!
test25CanMoveRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new!

!methodRemoval: MarsRoverTest #test24CanMoveLeftLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:50:51'!
test24CanMoveLeftLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft, self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new!

!methodRemoval: MarsRoverTest #test23CanMoveLeftLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:50:57'!
test23CanMoveLeftLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft, self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:51:06'!
test22CanRotateLeftWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!methodRemoval: MarsRoverTest #test22CanMoveLeftWhenFacingEast stamp: 'IB 5/15/2023 10:51:06'!
test22CanMoveLeftWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:51:16'!
test21CanRotateLeftWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !

!methodRemoval: MarsRoverTest #test21CanMoveLeftWhenFacingWest stamp: 'IB 5/15/2023 10:51:16'!
test21CanMoveLeftWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:51:26'!
test20CanRotateLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !

!methodRemoval: MarsRoverTest #test20CanMoveLeftWhenFacingSouth stamp: 'IB 5/15/2023 10:51:26'!
test20CanMoveLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new!
!MarsRoverTest methodsFor: 'testing' stamp: 'IB 5/15/2023 10:51:36'!
test19CanRotateLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !

!methodRemoval: MarsRoverTest #test19CanMoveLeftWhenFacingNorth stamp: 'IB 5/15/2023 10:51:36'!
test19CanMoveLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new!

----SNAPSHOT----(15 May 2023 10:53:43) CuisUniversity-5799.image priorSource: 9463468!

----SNAPSHOT----(15 May 2023 10:54:10) CuisUniversity-5799.image priorSource: 9471002!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:58:41'!
testCanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: North new! !

!methodRemoval: MarsRoverTest #test02CanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 10:58:41'!
test02CanMoveForwardOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: North new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:58:48'!
testCanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: West new! !

!methodRemoval: MarsRoverTest #test18CanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 10:58:48'!
test18CanMoveBackwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: West new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:58:53'!
testCanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: West new! !

!methodRemoval: MarsRoverTest #test17CanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 10:58:53'!
test17CanMoveForwardsWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: West new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:01'!
testCanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: East new! !

!methodRemoval: MarsRoverTest #test16CanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 10:59:01'!
test16CanMoveBackwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: -1@0 andFacing: East new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:06'!
testCanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: East new! !

!methodRemoval: MarsRoverTest #test15CanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 10:59:06'!
test15CanMoveForwardsWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: 1@0 andFacing: East new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:11'!
testCanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: South new! !

!methodRemoval: MarsRoverTest #test14CanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:59:11'!
test14CanMoveBackwardsThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: South new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:16'!
testCanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: South new! !

!methodRemoval: MarsRoverTest #test13CanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:59:16'!
test13CanMoveBackwardsTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: South new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:23'!
testCanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: South new! !

!methodRemoval: MarsRoverTest #test13CanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:59:23'!
test13CanMoveBackwardsOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@1 andFacing: South new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:27'!
testCanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: South new! !

!methodRemoval: MarsRoverTest #test12CanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:59:27'!
test12CanMoveForwardThreeTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: South new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:32'!
testCanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: South new! !

!methodRemoval: MarsRoverTest #test11CanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 10:59:32'!
test11CanMoveForwardTwoTimesWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: South new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:38'!
testCanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: South new! !

!methodRemoval: MarsRoverTest #test10CanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 10:59:38'!
test10CanMoveForwardOneTimeWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: South new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:43'!
testCanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards , self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!methodRemoval: MarsRoverTest #test09CanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:59:43'!
test09CanMoveBackwardsForwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards , self commandToMoveForwards.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:47'!
testCanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards , self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!methodRemoval: MarsRoverTest #test08CanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 10:59:47'!
test08CanMoveForwardsBackwardsWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveForwards , self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 10:59:54'!
testCanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: North new! !

!methodRemoval: MarsRoverTest #test03CanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 10:59:54'!
test03CanMoveForwardTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@2 andFacing: North new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 11:00:00'!
testCanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: North new! !

!methodRemoval: MarsRoverTest #test04CanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 11:00:00'!
test04CanMoveForwardThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveForwardThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@3 andFacing: North new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 11:00:04'!
testCanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: North new! !

!methodRemoval: MarsRoverTest #test06CanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 11:00:04'!
test06CanMoveBackwardsTwoTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsTwoTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-2 andFacing: North new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 11:00:08'!
testCanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: North new! !

!methodRemoval: MarsRoverTest #test07CanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 11:00:08'!
test07CanMoveBackwardsThreeTimesWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandsToMoveBackwardsThreeTimes.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-3 andFacing: North new!
!MarsRoverTest methodsFor: 'tests - movement' stamp: 'IB 5/15/2023 11:00:13'!
testCanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: North new! !

!methodRemoval: MarsRoverTest #test05CanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 11:00:13'!
test05CanMoveBackwardsOneTimeWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToMoveBackwards.
	
	self assertMarsRover: marsRover isPlacedAt: 0@-1 andFacing: North new!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'IB 5/15/2023 11:00:22'!
testCanRotateLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !

!methodRemoval: MarsRoverTest #test19CanRotateLeftWhenFacingNorth stamp: 'IB 5/15/2023 11:00:22'!
test19CanRotateLeftWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'IB 5/15/2023 11:00:26'!
testCanRotateLeftWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !

!methodRemoval: MarsRoverTest #test21CanRotateLeftWhenFacingWest stamp: 'IB 5/15/2023 11:00:26'!
test21CanRotateLeftWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'IB 5/15/2023 11:00:31'!
testCanRotateRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !

!methodRemoval: MarsRoverTest #test25CanRotateRightWhenFacingNorth stamp: 'IB 5/15/2023 11:00:31'!
test25CanRotateRightWhenFacingNorth

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'IB 5/15/2023 11:00:37'!
testCanRotateRightWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new! !

!methodRemoval: MarsRoverTest #test27CanRotateRightWhenFacingSouth stamp: 'IB 5/15/2023 11:00:37'!
test27CanRotateRightWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: West new!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'IB 5/15/2023 11:00:42'!
testCanRotateRightWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!methodRemoval: MarsRoverTest #test28CanRotateRightWhenFacingWest stamp: 'IB 5/15/2023 11:00:42'!
test28CanRotateRightWhenFacingWest

	| marsRover |
	
	marsRover := self marsRoverFacingWest.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'IB 5/15/2023 11:00:49'!
testCanRotateRightWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new! !

!methodRemoval: MarsRoverTest #test26CanRotateRightWhenFacingEast stamp: 'IB 5/15/2023 11:00:49'!
test26CanRotateRightWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateRight.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: South new!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'IB 5/15/2023 11:00:53'!
testCanRotateLeftWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!methodRemoval: MarsRoverTest #test22CanRotateLeftWhenFacingEast stamp: 'IB 5/15/2023 11:00:53'!
test22CanRotateLeftWhenFacingEast

	| marsRover |
	
	marsRover := self marsRoverFacingEast.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new!
!MarsRoverTest methodsFor: 'tests - rotation' stamp: 'IB 5/15/2023 11:00:59'!
testCanRotateLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new! !

!methodRemoval: MarsRoverTest #test20CanRotateLeftWhenFacingSouth stamp: 'IB 5/15/2023 11:00:59'!
test20CanRotateLeftWhenFacingSouth

	| marsRover |
	
	marsRover := self marsRoverFacingSouth.
	
	marsRover executeAllCommandsIn: self commandToRotateLeft.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: East new!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 5/15/2023 11:01:07'!
testEmptyCommandListDoesntMoveRover

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: ''.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new! !

!methodRemoval: MarsRoverTest #test01EmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 11:01:07'!
test01EmptyCommandListDoesntMoveRover

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	marsRover executeAllCommandsIn: ''.
	
	self assertMarsRover: marsRover isPlacedAt: self marsRoverInitialPosition andFacing: North new!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 5/15/2023 11:01:12'!
testRaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self executingAllCommandsIn: 'xf' 
		in: marsRover 
		shouldFailAndLeaveMarsRoverPlacedAt: self marsRoverInitialPosition 
		facing: North new! !

!methodRemoval: MarsRoverTest #test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 11:01:12'!
test31RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self executingAllCommandsIn: 'xf' 
		in: marsRover 
		shouldFailAndLeaveMarsRoverPlacedAt: self marsRoverInitialPosition 
		facing: North new!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 5/15/2023 11:01:16'!
testRaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self executingAllCommandsIn: 'fx' 
		in: marsRover 
		shouldFailAndLeaveMarsRoverPlacedAt: 0@1 
		facing: North new! !

!methodRemoval: MarsRoverTest #test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 11:01:16'!
test32RaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self executingAllCommandsIn: 'fx' 
		in: marsRover 
		shouldFailAndLeaveMarsRoverPlacedAt: 0@1 
		facing: North new!
!MarsRoverTest methodsFor: 'tests' stamp: 'IB 5/15/2023 11:01:21'!
testRaiseErrorAndDoesNotMoveWhenInvalidCommandReceived

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self executingAllCommandsIn: 'x' 
		in: marsRover 
		shouldFailAndLeaveMarsRoverPlacedAt: self marsRoverInitialPosition 
		facing: North new! !

!methodRemoval: MarsRoverTest #test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 11:01:21'!
test30RaiseErrorAndDoesNotMoveWhenInvalidCommandReceived

	| marsRover |
	
	marsRover := self marsRoverFacingNorth.
	
	self executingAllCommandsIn: 'x' 
		in: marsRover 
		shouldFailAndLeaveMarsRoverPlacedAt: self marsRoverInitialPosition 
		facing: North new!

----SNAPSHOT----(15 May 2023 11:01:26) CuisUniversity-5799.image priorSource: 9471090!

----SNAPSHOT----(15 May 2023 11:02:35) CuisUniversity-5799.image priorSource: 9492194!
!MarsRover methodsFor: 'execution' stamp: 'IB 5/15/2023 11:04:56' prior: 50623608!
executeAllCommandsIn: aCommandList

	aCommandList isEmpty ifTrue: [^self].
	
	aCommandList do: [:command | 
		proceduresByCommand at: command 
			ifPresent: [:procedure | procedure value] 
			ifAbsent: [InvalidCommand signal]]
! !

!testRun: #MarsRoverTest #testCanMoveBackwardsForwardsWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveBackwardsOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveBackwardsOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveBackwardsThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveBackwardsThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveBackwardsTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveBackwardsTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveBackwardsWhenFacingEast stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveBackwardsWhenFacingWest stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveForwardOneTimeWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveForwardOneTimeWhenFacingSouth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveForwardThreeTimesWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveForwardThreeTimesWhenFacingSouth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveForwardTwoTimesWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveForwardTwoTimesWhenFacingSouth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveForwardsBackwardsWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveForwardsWhenFacingEast stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanMoveForwardsWhenFacingWest stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanRotateLeftWhenFacingEast stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanRotateLeftWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanRotateLeftWhenFacingSouth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanRotateLeftWhenFacingWest stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanRotateRightWhenFacingEast stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanRotateRightWhenFacingNorth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanRotateRightWhenFacingSouth stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testCanRotateRightWhenFacingWest stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testEmptyCommandListDoesntMoveRover stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testRaiseErrorAndDoesNotMoveWhenInvalidCommandReceived stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testRaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedAfterAValidOne stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

!testRun: #MarsRoverTest #testRaiseErrorAndDoesNotMoveWhenInvalidCommandReceivedFollowedByValidOnes stamp: 'IB 5/15/2023 11:05:03'!
PASSED!

----SNAPSHOT----(15 May 2023 11:06:29) CuisUniversity-5799.image priorSource: 9492282!

----QUIT----(15 May 2023 11:08:16) CuisUniversity-5799.image priorSource: 9495964!
