

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (21 May 2023 19:15:06) as /home/iboaretto/Desktop/uba/inge1/linux64/CuisUniversity-5706.image!


----End fileIn of /home/iboaretto/Desktop/uba/inge1/linux64/Portfolio-Ejercicio.st----!

----SNAPSHOT----(21 May 2023 19:15:42) CuisUniversity-5706.image priorSource: 8713034!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 19:16:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:16:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:16:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'IB 5/21/2023 19:16:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 19:16:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:16:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:16:02'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:16:02'!
FAILURE!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 19:16:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:16:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:16:48'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'IB 5/21/2023 19:16:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 19:16:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:16:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:16:48'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:16:48'!
FAILURE!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:17:20'!
FAILURE!

Object subclass: #AccountTransaction
	instanceVariableNames: 'amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 19:17:40'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Object subclass: #AccountTransaction
	instanceVariableNames: 'assetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 19:17:56'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'assetAmount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'IB 5/21/2023 19:18:13' prior: 50604037 overrides: 16902254!
value 

	^assetAmount! !

Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 19:20:51'!
Object subclass: #AccountTransaction
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:25:45' prior: 50603952!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account aBalance |
	
	account := ReceptiveAccount new.

	aBalance := 0.
	self assert: aBalance equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:26:18'!
assertBalanceOf: account equals: aBalance

	^ self assert: aBalance equals: account balance! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:26:18' prior: 50604274!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account aBalance |
	
	account := ReceptiveAccount new.

	aBalance := 0.
	self assertBalanceOf: account equals: aBalance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:26:44' prior: 50604282!
assertBalanceOf: anAccount equals: aBalance

	^ self assert: aBalance equals: anAccount balance! !

----SNAPSHOT----(21 May 2023 19:27:01) CuisUniversity-5706.image priorSource: 8720449!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:27:11' prior: 50604288!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	| account |
	
	account := ReceptiveAccount new.

	self assertBalanceOf: account equals: 0.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:27:19' prior: 50604306!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	self assertBalanceOf: ReceptiveAccount new equals: 0.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:27:22' prior: 50604314!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	self assertBalanceOf: ReceptiveAccount new equals: 0
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:27:28' prior: 50603959!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:27:40' prior: 50604328!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
		
	self assert: 100 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:27:56' prior: 50604337!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := ReceptiveAccount new.
	
	Deposit register: 100 on: account.
		
	self assertBalanceOf: account equals: 100
! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 19:27:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:27:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:27:59'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'IB 5/21/2023 19:27:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 19:27:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:27:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:27:59'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:27:59'!
FAILURE!
!Withdraw methodsFor: 'value' stamp: 'IB 5/21/2023 19:28:14' prior: 50604108 overrides: 50604258!
value

	^ value negated! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'IB 5/21/2023 19:28:17'!
FAILURE!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:28:17'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'IB 5/21/2023 19:28:17'!
FAILURE!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:28:30'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:28:32'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 19:28:33'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'IB 5/21/2023 19:28:35'!
FAILURE!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'IB 5/21/2023 19:28:35'!
FAILURE!

!classDefinition: #AccountTransaction category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 19:29:25'!
Object subclass: #AccountTransaction
	instanceVariableNames: 'amount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!AccountTransaction methodsFor: 'value' stamp: 'IB 5/21/2023 19:29:22'!
amount

	^amount! !

!methodRemoval: AccountTransaction #value stamp: 'IB 5/21/2023 19:29:34'!
value 

	^assetAmount!
!Deposit methodsFor: 'value' stamp: 'IB 5/21/2023 19:29:55'!
amountAsSeenFromParty

	^ self amount! !

!methodRemoval: Deposit #value stamp: 'IB 5/21/2023 19:30:00'!
value

	^ value!
!Withdraw methodsFor: 'value' stamp: 'IB 5/21/2023 19:30:13'!
amountAsSeenFromParty

	^ self amount negated! !

!methodRemoval: Withdraw #value stamp: 'IB 5/21/2023 19:30:19'!
value

	^ value negated!
!AccountTransaction methodsFor: 'value' stamp: 'IB 5/21/2023 19:30:37'!
initializeFor: aValue

	amount := aValue ! !

!methodRemoval: Deposit #initializeFor: stamp: 'IB 5/21/2023 19:30:46'!
initializeFor: aValue

	value := aValue !

!methodRemoval: Withdraw #initializeFor: stamp: 'IB 5/21/2023 19:30:53'!
initializeFor: aValue

	value := aValue !
!ReceptiveAccount methodsFor: 'balance' stamp: 'IB 5/21/2023 19:31:17' prior: 50604152!
balance

	^transactions sum: [ :aTransaction | aTransaction amountAsSeenFromParty ] ifEmpty: [ 0 ]! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:32:32' prior: 50603978!
test04WithdrawValueMustBePositive 

	| account amountWithdrawn |
	
	account := ReceptiveAccount new.
	
	amountWithdrawn := 50.
	
	self assert: amountWithdrawn equals: (Withdraw register: amountWithdrawn on: account) amount
! !
!AccountTransaction methodsFor: 'value' stamp: 'IB 5/21/2023 19:33:27'!
amountAsSeenFromParty

	self subclassResponsibility ! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:37:46'!
emptyAccount

	^ ReceptiveAccount new! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:37:46' prior: 50603968!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := self emptyAccount.
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:37:46' prior: 50604346!
test02DepositIncreasesBalanceOnTransactionValue 

	| account |
	
	account := self emptyAccount.
	
	Deposit register: 100 on: account.
		
	self assertBalanceOf: account equals: 100
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:37:46' prior: 50604321!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	self assertBalanceOf: self emptyAccount equals: 0
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:37:46' prior: 50603988!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := self emptyAccount.
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:37:46' prior: 50604482!
test04WithdrawValueMustBePositive 

	| account amountWithdrawn |
	
	account := self emptyAccount.
	
	amountWithdrawn := 50.
	
	self assert: amountWithdrawn equals: (Withdraw register: amountWithdrawn on: account) amount
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:37:46' prior: 50604013!
test07AccountKnowsItsTransactions 

	| account1 deposit1 |
	
	account1 := self emptyAccount.
	
	deposit1 := Deposit register: 50 on: account1.
		
	self assert: 1 equals: account1 transactions size.
	self assert: (account1 transactions includes: deposit1).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:37:46' prior: 50604001!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := self emptyAccount.
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:38:03' prior: 50604502!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := self emptyAccount.
	
	Deposit register: 100 on: account.
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:38:11'!
test04WithdrawValueMustBePositiveFIX 

	| account amountWithdrawn |
	
	account := self emptyAccount.
	
	amountWithdrawn := 50.
	
	self assert: amountWithdrawn equals: (Withdraw register: amountWithdrawn on: account) amount
! !

!methodRemoval: ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'IB 5/21/2023 19:38:15'!
test04WithdrawValueMustBePositive 

	| account amountWithdrawn |
	
	account := self emptyAccount.
	
	amountWithdrawn := 50.
	
	self assert: amountWithdrawn equals: (Withdraw register: amountWithdrawn on: account) amount
!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:38:23' prior: 50604528!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := self emptyAccount.
	
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:38:38' prior: 50604605!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| account deposit withdraw |
	
	account := self emptyAccount.
	
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:38:47' prior: 50604562!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw account |
	
	account := self emptyAccount.
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:41:02' prior: 50604574!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| account |
	
	account := self emptyAccount.
	Deposit register: 100 on: account.
	
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance.
! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 19:43:08'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: 'myAccount'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:43:07' overrides: 16961394!
setUp

	myAccount := self emptyAccount
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:43:17' prior: 50604521!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	self assertBalanceOf: myAccount equals: 0
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:43:33' prior: 50604512!
test02DepositIncreasesBalanceOnTransactionValue 
	
	Deposit register: 100 on: myAccount.
		
	self assertBalanceOf: myAccount equals: 100
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:43:51' prior: 50604643!
test03WithdrawDecreasesBalanceOnTransactionValue 

	Deposit register: 100 on: myAccount.
	
	Withdraw register: 50 on: myAccount.
		
	self assert: 50 equals: myAccount balance.
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:43:59' prior: 50604680!
test03WithdrawDecreasesBalanceOnTransactionValue 

	Deposit register: 100 on: myAccount.
	
	Withdraw register: 50 on: myAccount.
		
	self assert: 50 equals: myAccount balance
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:44:13' prior: 50604584!
test04WithdrawValueMustBePositiveFIX 

	| amountWithdrawn |
	
	amountWithdrawn := 50.
	
	self assert: amountWithdrawn equals: (Withdraw register: amountWithdrawn on: myAccount) amount
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:44:31' prior: 50604618!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| deposit withdraw |
	
	deposit := Deposit register: 100 on: myAccount.
	withdraw := Withdraw register: 50 on: myAccount.
		
	self assert: (myAccount hasRegistered: deposit).
	self assert: (myAccount hasRegistered: withdraw)
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:44:49' prior: 50604631!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw  |
	
	myAccount := self emptyAccount.
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (myAccount hasRegistered: deposit).
	self deny: (myAccount hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:45:11' prior: 50604551!
test07AccountKnowsItsTransactions 

	| deposit1 |
	
	deposit1 := Deposit register: 50 on: myAccount.
		
	self assert: 1 equals: myAccount transactions size.
	self assert: (myAccount transactions includes: deposit1).
! !

!classDefinition: #ReceptiveAccountTest category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 19:45:20'!
TestCase subclass: #ReceptiveAccountTest
	instanceVariableNames: 'myAccount account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:45:18' prior: 50604661 overrides: 16961394!
setUp

	account := self emptyAccount
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:45:59' prior: 50604750 overrides: 16961394!
setUp

	account := ReceptiveAccount new
! !

!methodRemoval: ReceptiveAccountTest #emptyAccount stamp: 'IB 5/21/2023 19:46:05'!
emptyAccount

	^ ReceptiveAccount new!
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:46:25' prior: 50604719!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw |
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (myAccount hasRegistered: deposit).
	self deny: (myAccount hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:46:33' prior: 50604764!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw |
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:46:38' prior: 50604666!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	self assertBalanceOf: account equals: 0
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:46:43' prior: 50604672!
test02DepositIncreasesBalanceOnTransactionValue 
	
	Deposit register: 100 on: account.
		
	self assertBalanceOf: account equals: 100
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:46:49' prior: 50604689!
test03WithdrawDecreasesBalanceOnTransactionValue 

	Deposit register: 100 on: account.
	
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:46:52' prior: 50604698!
test04WithdrawValueMustBePositiveFIX 

	| amountWithdrawn |
	
	amountWithdrawn := 50.
	
	self assert: amountWithdrawn equals: (Withdraw register: amountWithdrawn on: account) amount
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:46:59' prior: 50604707!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| deposit withdraw |
	
	deposit := Deposit register: 100 on: account.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)
! !
!ReceptiveAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:47:06' prior: 50604731!
test07AccountKnowsItsTransactions 

	| deposit1 |
	
	deposit1 := Deposit register: 50 on: account.
		
	self assert: 1 equals: account transactions size.
	self assert: (account transactions includes: deposit1).
! !

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:47:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 19:47:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:47:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:47:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositiveFIX stamp: 'IB 5/21/2023 19:47:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 19:47:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:47:07'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:47:07'!
PASSED!

----SNAPSHOT----(21 May 2023 19:47:12) CuisUniversity-5706.image priorSource: 8724866!

----SNAPSHOT----(21 May 2023 19:47:36) CuisUniversity-5706.image priorSource: 8742989!

!classRenamed: #ReceptiveAccount as: #Account stamp: 'IB 5/21/2023 19:48:40'!
Smalltalk renameClassNamed: #ReceptiveAccount as: #Account!
!ReceptiveAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 19:48:40' prior: 50604755 overrides: 16961394!
setUp

	account := Account new
! !

!classRenamed: #ReceptiveAccountTest as: #AccountTest stamp: 'IB 5/21/2023 19:48:56'!
Smalltalk renameClassNamed: #ReceptiveAccountTest as: #AccountTest!

!classRenamed: #Account as: #SimpleAccount stamp: 'IB 5/21/2023 19:49:26'!
Smalltalk renameClassNamed: #Account as: #SimpleAccount!
!AccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 19:49:26' prior: 50604881 overrides: 16961394!
setUp

	account := SimpleAccount new
! !

!classRenamed: #AccountTest as: #SimpleAccountTest stamp: 'IB 5/21/2023 19:49:42'!
Smalltalk renameClassNamed: #AccountTest as: #SimpleAccountTest!

!testRun: #SimpleAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 19:50:18'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:50:18'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:50:18'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawValueMustBePositiveFIX stamp: 'IB 5/21/2023 19:50:18'!
PASSED!

!testRun: #SimpleAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 19:50:18'!
PASSED!

!testRun: #SimpleAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:50:18'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:50:18'!
PASSED!

----SNAPSHOT----(21 May 2023 19:50:22) CuisUniversity-5706.image priorSource: 8743077!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:51:02' prior: 50604792!
test02DepositIncreasesBalanceOnTransactionValue 
	
	| anAmount |
	anAmount := 100.
	Deposit register: anAmount on: account.
		
	self assertBalanceOf: account equals: 100
! !

AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Deposit category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 19:52:18'!
AccountTransaction subclass: #Deposit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Withdraw category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 19:52:22'!
AccountTransaction subclass: #Withdraw
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:54:04'!
deposit: anAmount

	^ Deposit register: anAmount on: account! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:54:04' prior: 50604933!
test02DepositIncreasesBalanceOnTransactionValue 
	
	| anAmount |
	anAmount := 100.
	self deposit: anAmount.
		
	self assertBalanceOf: account equals: 100
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:54:21' prior: 50604965!
deposit: anAmountToBeDepositedInTheAccount

	^ Deposit register: anAmountToBeDepositedInTheAccount on: account! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:54:47' prior: 50604970!
test02DepositIncreasesBalanceOnTransactionValue 
	
	self deposit: 100.
		
	self assertBalanceOf: account equals: 100
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:55:04' prior: 50604800!
test03WithdrawDecreasesBalanceOnTransactionValue 

	self deposit: 100.
	
	Withdraw register: 50 on: account.
		
	self assert: 50 equals: account balance
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:55:14' prior: 50604818!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| deposit withdraw |
	
	deposit := self deposit: 100.
	withdraw := Withdraw register: 50 on: account.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:55:23' prior: 50604775!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw |
	
	deposit :=  self deposit: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:55:38' prior: 50604830!
test07AccountKnowsItsTransactions 

	| deposit1 |
	
	deposit1 := self deposit: 50.
		
	self assert: 1 equals: account transactions size.
	self assert: (account transactions includes: deposit1).
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:56:06' prior: 50604992!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| anAmountToBeWithdrawnFromAnAccount |
	self deposit: 100.
	
	anAmountToBeWithdrawnFromAnAccount := 50.
	Withdraw register: anAmountToBeWithdrawnFromAnAccount on: account.
		
	self assert: 50 equals: account balance
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:56:32'!
withdraw: anAmountToBeWithdrawnFromAnAccount

	^ Withdraw register: anAmountToBeWithdrawnFromAnAccount on: account! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:56:32' prior: 50605031!
test03WithdrawDecreasesBalanceOnTransactionValue 

	| anAmountToBeWithdrawnFromAnAccount |
	self deposit: 100.
	
	anAmountToBeWithdrawnFromAnAccount := 50.
	self withdraw: anAmountToBeWithdrawnFromAnAccount.
		
	self assert: 50 equals: account balance
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:56:40' prior: 50605049!
test03WithdrawDecreasesBalanceOnTransactionValue 

	self deposit: 100.
	
	self withdraw: 50.
		
	self assert: 50 equals: account balance
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:57:13' prior: 50604809!
test04WithdrawValueMustBePositiveFIX 

	| amountWithdrawn |
	
	amountWithdrawn := 50.
	
	self assert: amountWithdrawn equals: (self withdraw: amountWithdrawn) amount
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:57:36' prior: 50605000!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| deposit withdraw |
	
	deposit := self deposit: 100.
	withdraw := self withdraw: 50.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:57:48' prior: 50605011!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw |
	
	deposit :=  self deposit: 200.
	withdraw := self withdraw: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !

----SNAPSHOT----(21 May 2023 19:58:06) CuisUniversity-5706.image priorSource: 8744916!

!testRun: #SimpleAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 19:58:08'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:58:08'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:58:08'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawValueMustBePositiveFIX stamp: 'IB 5/21/2023 19:58:08'!
PASSED!

!testRun: #SimpleAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 19:58:08'!
PASSED!

!testRun: #SimpleAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:58:08'!
FAILURE!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:58:08'!
PASSED!

!testRun: #SimpleAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:58:08'!
FAILURE!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 19:59:23' prior: 50605088!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw |
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered:withdraw).
! !

!testRun: #SimpleAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 19:59:28'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:59:28'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 19:59:28'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawValueMustBePositiveFIX stamp: 'IB 5/21/2023 19:59:28'!
PASSED!

!testRun: #SimpleAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 19:59:28'!
PASSED!

!testRun: #SimpleAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 19:59:28'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 19:59:28'!
PASSED!

----SNAPSHOT----(21 May 2023 19:59:36) CuisUniversity-5706.image priorSource: 8750324!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:00:19' prior: 50605068!
test04WithdrawValueMustBePositiveFIX 
	
	self assert: 50 equals: (self withdraw: 50) amount
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:01:08' prior: 50605022!
test07AccountKnowsItsTransactions 

	| deposit |
	
	deposit := self deposit: 50.
		
	self assert: 1 equals: account transactions size.
	self assert: (account transactions includes: deposit)! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:01:22' prior: 50605176!
test07AccountKnowsItsTransactions 

	| deposit |
	
	deposit := self deposit: 50.
		
	self assert: account transactions size equals: 1.
	self assert: (account transactions includes: deposit)! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:02:16' prior: 50605185!
test07AccountKnowsItsTransactions 

	| deposit |
	
	deposit := self deposit: 50.
		
	self assert: account transactions size equals: 1.
	self assert: account transactions includes: deposit! !

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 20:02:17'!
PASSED!

!testRun: #SimpleAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 20:02:17'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 20:02:17'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 20:02:17'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawValueMustBePositiveFIX stamp: 'IB 5/21/2023 20:02:17'!
PASSED!

!testRun: #SimpleAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 20:02:17'!
PASSED!

!testRun: #SimpleAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 20:02:17'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 20:02:17'!
PASSED!

----SNAPSHOT----(21 May 2023 20:02:21) CuisUniversity-5706.image priorSource: 8752521!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:02:41' prior: 50605131!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw |
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered: withdraw).
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:03:28'!
test06AccountDoNotKnowUnregisteredTransactions

	| deposit withdraw |
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered: withdraw).
! !

!methodRemoval: SimpleAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'IB 5/21/2023 20:03:28'!
test06ReceptiveAccountDoNotKnowNotRegisteredTransactions

	| deposit withdraw |
	
	deposit :=  Deposit for: 200.
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: deposit).
	self deny: (account hasRegistered: withdraw).
!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:03:47'!
test05AccountKnowsRegisteredTransactions 

	| deposit withdraw |
	
	deposit := self deposit: 100.
	withdraw := self withdraw: 50.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)
! !

!methodRemoval: SimpleAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 20:03:47'!
test05ReceptiveAccountKnowsRegisteredTransactions 

	| deposit withdraw |
	
	deposit := self deposit: 100.
	withdraw := self withdraw: 50.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)
!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:04:21'!
test04WithdrawValueIsPositiveFIX 
	
	self assert: 50 equals: (self withdraw: 50) amount
! !

!methodRemoval: SimpleAccountTest #test04WithdrawValueMustBePositiveFIX stamp: 'IB 5/21/2023 20:04:21'!
test04WithdrawValueMustBePositiveFIX 
	
	self assert: 50 equals: (self withdraw: 50) amount
!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:04:29' prior: 50605287!
test04WithdrawValueIsPositiveFIX
	
	self assert: 50 equals: (self withdraw: 50) amount
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:04:52'!
test03WithdrawDecreasesBalanceOfAccount 

	self deposit: 100.
	
	self withdraw: 50.
		
	self assert: 50 equals: account balance
! !

!methodRemoval: SimpleAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 20:04:52'!
test03WithdrawDecreasesBalanceOnTransactionValue 

	self deposit: 100.
	
	self withdraw: 50.
		
	self assert: 50 equals: account balance
!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:05:02'!
test02DepositIncreasesBalanceOfAccount 
	
	self deposit: 100.
		
	self assertBalanceOf: account equals: 100
! !

!methodRemoval: SimpleAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'IB 5/21/2023 20:05:02'!
test02DepositIncreasesBalanceOnTransactionValue 
	
	self deposit: 100.
		
	self assertBalanceOf: account equals: 100
!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:05:43'!
test01AccountBalanceIsNothingWhenCreated 

	self assertBalanceOf: account equals: 0
! !

!methodRemoval: SimpleAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'IB 5/21/2023 20:05:43'!
test01ReceptiveAccountHaveZeroAsBalanceWhenCreated 

	self assertBalanceOf: account equals: 0
!

----SNAPSHOT----(21 May 2023 20:05:47) CuisUniversity-5706.image priorSource: 8754590!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:06:38' prior: 50605245!
test06AccountDoNotKnowUnregisteredTransactions

	| withdraw |
	
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: Deposit for: 200).
	self deny: (account hasRegistered: withdraw).
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:06:44' prior: 50605349!
test06AccountDoNotKnowUnregisteredTransactions

	| withdraw |
	
	withdraw := Withdraw for: 50.
		
	self deny: (account hasRegistered: (Deposit for: 200)).
	self deny: (account hasRegistered: withdraw).
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:07:07' prior: 50605359!
test06AccountDoNotKnowUnregisteredTransactions

	self deny: (account hasRegistered: (Deposit for: 200)).
	self deny: (account hasRegistered: Withdraw for: 50).
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:07:17' prior: 50605369!
test06AccountDoNotKnowUnregisteredTransactions

	self deny: (account hasRegistered: (Deposit for: 200)).
	self deny: (account hasRegistered: (Withdraw for: 50)).
! !
!SimpleAccount methodsFor: 'initialization' stamp: 'IB 5/21/2023 20:08:24' prior: 50604138 overrides: 16920235!
initialize

	transactions := OrderedCollection new! !
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:09:15' prior: 50604978!
deposit: anAmountToBeDepositedInTheAccount

	^ account register: (Deposit for: anAmountToBeDepositedInTheAccount)! !
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:09:37' prior: 50605042!
withdraw: anAmountToBeWithdrawnFromAnAccount

	^ account register: (Withdraw for: anAmountToBeWithdrawnFromAnAccount)! !

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/21/2023 20:09:59'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesBalanceOfAccount stamp: 'IB 5/21/2023 20:09:59'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawDecreasesBalanceOfAccount stamp: 'IB 5/21/2023 20:09:59'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawValueIsPositiveFIX stamp: 'IB 5/21/2023 20:09:59'!
ERROR!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 20:09:59'!
FAILURE!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/21/2023 20:09:59'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 20:09:59'!
FAILURE!

!testRun: #SimpleAccountTest #test04WithdrawValueIsPositiveFIX stamp: 'IB 5/21/2023 20:10:04'!
ERROR!
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:10:56' prior: 50605391!
deposit: anAmountToBeDepositedInTheAccount

	|deposit|
	
	deposit := Deposit for: anAmountToBeDepositedInTheAccount.
	
	 account register: deposit.
	
	^deposit! !
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:11:23' prior: 50605398!
withdraw: anAmountToBeWithdrawnFromAnAccount

	|withdraw|
	
	withdraw := Withdraw for: anAmountToBeWithdrawnFromAnAccount.
	
	 account register: withdraw.
	
	^withdraw! !

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/21/2023 20:11:25'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesBalanceOfAccount stamp: 'IB 5/21/2023 20:11:25'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawDecreasesBalanceOfAccount stamp: 'IB 5/21/2023 20:11:25'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawValueIsPositiveFIX stamp: 'IB 5/21/2023 20:11:25'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 20:11:25'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/21/2023 20:11:25'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 20:11:25'!
PASSED!

----SNAPSHOT----(21 May 2023 20:11:27) CuisUniversity-5706.image priorSource: 8758254!
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:12:33'!
onAccountMakeADepositOf: anAmountToBeDepositedInTheAccount

	|deposit|
	
	deposit := Deposit for: anAmountToBeDepositedInTheAccount.
	
	 account register: deposit.
	
	^deposit! !
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:13:59'!
onAccountMakeAWithdrawalOf: anAmountToBeWithdrawnFromAnAccount

	|withdraw|
	
	withdraw := Withdraw for: anAmountToBeWithdrawnFromAnAccount.
	
	 account register: withdraw.
	
	^withdraw! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:14:19' prior: 50605266!
test05AccountKnowsRegisteredTransactions 

	| deposit withdraw |
	
	deposit := self deposit: 100.
	withdraw := self onAccountMakeAWithdrawalOf: 50.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:14:25' prior: 50605492!
test05AccountKnowsRegisteredTransactions 

	| deposit withdraw |
	
	deposit := self onAccountMakeADepositOf: 100.
	withdraw := self onAccountMakeAWithdrawalOf: 50.
		
	self assert: (account hasRegistered: deposit).
	self assert: (account hasRegistered: withdraw)
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:14:44' prior: 50605299!
test04WithdrawValueIsPositiveFIX
	
	self assert: 50 equals: (Withdraw for: 50) amount
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:14:58' prior: 50605305!
test03WithdrawDecreasesBalanceOfAccount 

	self onAccountMakeADepositOf: 100.
	
	self onAccountMakeAWithdrawalOf: 50.
		
	self assert: 50 equals: account balance
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:15:07' prior: 50605320!
test02DepositIncreasesBalanceOfAccount 
	
	self onAccountMakeADepositOf: 100.
		
	self assertBalanceOf: account equals: 100
! !

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/21/2023 20:15:14'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesBalanceOfAccount stamp: 'IB 5/21/2023 20:15:14'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawDecreasesBalanceOfAccount stamp: 'IB 5/21/2023 20:15:14'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawValueIsPositiveFIX stamp: 'IB 5/21/2023 20:15:14'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 20:15:14'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/21/2023 20:15:14'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 20:15:14'!
PASSED!

----SNAPSHOT----(21 May 2023 20:15:17) CuisUniversity-5706.image priorSource: 8762286!
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:16:05'!
onAccountRegister: anAccountTransaction

	account register: anAccountTransaction ! !
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:16:20' prior: 50605483!
onAccountMakeAWithdrawalOf: anAmountToBeWithdrawnFromAnAccount

	|withdraw|
	
	withdraw := Withdraw for: anAmountToBeWithdrawnFromAnAccount.
	
	 self onAccountRegister: withdraw.
	
	^withdraw! !
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:16:32' prior: 50605475!
onAccountMakeADepositOf: anAmountToBeDepositedInTheAccount

	|deposit|
	
	deposit := Deposit for: anAmountToBeDepositedInTheAccount.
	
	  self onAccountRegister: deposit.
	
	^deposit! !
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:16:36' prior: 50605578!
onAccountMakeADepositOf: anAmountToBeDepositedInTheAccount

	|deposit|
	
	deposit := Deposit for: anAmountToBeDepositedInTheAccount.
	
	 self onAccountRegister: deposit.
	
	^deposit! !
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:17:21'!
depositFor: anAmountToBeDepositedInTheAccount

	^Deposit for: anAmountToBeDepositedInTheAccount! !
!SimpleAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 20:17:40'!
withdrawalFor: anAmountToBeWithdrawnFromAnAccount

	^Withdraw for: anAmountToBeWithdrawnFromAnAccount! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:17:58' prior: 50605515!
test04WithdrawValueIsPositiveFIX
	
	self assert: 50 equals: (self withdrawalFor: 50) amount
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:18:21' prior: 50605377!
test06AccountDoNotKnowUnregisteredTransactions

	self deny: (account hasRegistered: (self depositFor: 200)).
	self deny: (account hasRegistered: (self withdrawalFor: 50)).
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:18:40' prior: 50605194!
test07AccountKnowsItsTransactions 

	| deposit |
	
	deposit := self onAccountMakeADepositOf: 50.
		
	self assert: account transactions size equals: 1.
	self assert: account transactions includes: deposit! !

!methodRemoval: SimpleAccountTest #deposit: stamp: 'IB 5/21/2023 20:18:59'!
deposit: anAmountToBeDepositedInTheAccount

	|deposit|
	
	deposit := Deposit for: anAmountToBeDepositedInTheAccount.
	
	 account register: deposit.
	
	^deposit!

!methodRemoval: SimpleAccountTest #withdraw: stamp: 'IB 5/21/2023 20:19:02'!
withdraw: anAmountToBeWithdrawnFromAnAccount

	|withdraw|
	
	withdraw := Withdraw for: anAmountToBeWithdrawnFromAnAccount.
	
	 account register: withdraw.
	
	^withdraw!

----SNAPSHOT----(21 May 2023 20:19:33) CuisUniversity-5706.image priorSource: 8765091!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:19:54'!
test02DepositIncreasesAccountBalance 
	
	self onAccountMakeADepositOf: 100.
		
	self assertBalanceOf: account equals: 100
! !

!methodRemoval: SimpleAccountTest #test02DepositIncreasesBalanceOfAccount stamp: 'IB 5/21/2023 20:19:54'!
test02DepositIncreasesBalanceOfAccount 
	
	self onAccountMakeADepositOf: 100.
		
	self assertBalanceOf: account equals: 100
!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:20:08'!
test03WithdrawDecreasesAccountBalance 

	self onAccountMakeADepositOf: 100.
	
	self onAccountMakeAWithdrawalOf: 50.
		
	self assert: 50 equals: account balance
! !

!methodRemoval: SimpleAccountTest #test03WithdrawDecreasesBalanceOfAccount stamp: 'IB 5/21/2023 20:20:08'!
test03WithdrawDecreasesBalanceOfAccount 

	self onAccountMakeADepositOf: 100.
	
	self onAccountMakeAWithdrawalOf: 50.
		
	self assert: 50 equals: account balance
!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:20:27'!
test04WithdrawalValueIsPositiveFIX
	
	self assert: 50 equals: (self withdrawalFor: 50) amount
! !

!methodRemoval: SimpleAccountTest #test04WithdrawValueIsPositiveFIX stamp: 'IB 5/21/2023 20:20:27'!
test04WithdrawValueIsPositiveFIX
	
	self assert: 50 equals: (self withdrawalFor: 50) amount
!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:20:39'!
test03WithdrawalDecreasesAccountBalance 

	self onAccountMakeADepositOf: 100.
	
	self onAccountMakeAWithdrawalOf: 50.
		
	self assert: 50 equals: account balance
! !

!methodRemoval: SimpleAccountTest #test03WithdrawDecreasesAccountBalance stamp: 'IB 5/21/2023 20:20:39'!
test03WithdrawDecreasesAccountBalance 

	self onAccountMakeADepositOf: 100.
	
	self onAccountMakeAWithdrawalOf: 50.
		
	self assert: 50 equals: account balance
!

!classRenamed: #Withdraw as: #Withdrawal stamp: 'IB 5/21/2023 20:21:15'!
Smalltalk renameClassNamed: #Withdraw as: #Withdrawal!
!SimpleAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 20:21:15' prior: 50605602!
withdrawalFor: anAmountToBeWithdrawnFromAnAccount

	^Withdrawal for: anAmountToBeWithdrawnFromAnAccount! !
!SimpleAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 20:21:15' prior: 50605569!
onAccountMakeAWithdrawalOf: anAmountToBeWithdrawnFromAnAccount

	|withdraw|
	
	withdraw := Withdrawal for: anAmountToBeWithdrawnFromAnAccount.
	
	 self onAccountRegister: withdraw.
	
	^withdraw! !

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/21/2023 20:21:25'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesAccountBalance stamp: 'IB 5/21/2023 20:21:25'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawalDecreasesAccountBalance stamp: 'IB 5/21/2023 20:21:25'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/21/2023 20:21:25'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 20:21:25'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/21/2023 20:21:25'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 20:21:25'!
PASSED!

----SNAPSHOT----(21 May 2023 20:21:28) CuisUniversity-5706.image priorSource: 8767891!
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:22:15' prior: 50605692!
test03WithdrawalDecreasesAccountBalance 

	self onAccountMakeADepositOf: 100.
	
	self onAccountMakeAWithdrawalOf: 50.
		
	self assertBalanceOf: account equals: 50
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:23:17'!
assertAccountBalanceEqualsTo: aBalance
		
	self assertBalanceOf: account equals: aBalance
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:23:57' prior: 50605334!
test01AccountBalanceIsNothingWhenCreated 

	self assertAccountBalanceEqualsTo: 0
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:24:02' prior: 50605650!
test02DepositIncreasesAccountBalance 
	
	self onAccountMakeADepositOf: 100.
		
	self assertAccountBalanceEqualsTo: 100
! !
!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:24:06' prior: 50605756!
test03WithdrawalDecreasesAccountBalance 

	self onAccountMakeADepositOf: 100.
	
	self onAccountMakeAWithdrawalOf: 50.
		
	self assertAccountBalanceEqualsTo: 50
! !

!methodRemoval: SimpleAccountTest #assertBalanceOf:equals: stamp: 'IB 5/21/2023 20:24:48'!
assertBalanceOf: anAccount equals: aBalance

	^ self assert: aBalance equals: anAccount balance!
!SimpleAccountTest methodsFor: 'support - asserting' stamp: 'IB 5/21/2023 20:24:48' prior: 50605764!
assertAccountBalanceEqualsTo: aBalance
		
	 self assert: aBalance equals: account balance
! !
!SimpleAccount methodsFor: 'balance' stamp: 'IB 5/21/2023 20:26:15' prior: 50604476!
balance

	^ transactions sum: [ :aTransaction | aTransaction amountAsSeenFromParty ] ifEmpty: [ 0 ]! !

----SNAPSHOT----(21 May 2023 20:27:03) CuisUniversity-5706.image priorSource: 8771272!

TestCase subclass: #SimpleAccountTest
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #SimpleAccountTest category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 20:27:12'!
TestCase subclass: #SimpleAccountTest
	instanceVariableNames: 'account'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

----SNAPSHOT----(21 May 2023 20:27:14) CuisUniversity-5706.image priorSource: 8773094!

TestCase subclass: #CompositeAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #CompositeAccountTest category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 20:28:43'!
TestCase subclass: #CompositeAccountTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #CompositeAccount category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 20:33:08'!
Object subclass: #CompositeAccount
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!CompositeAccountTest methodsFor: 'no messages' stamp: 'IB 5/21/2023 20:33:02'!
test01CantCreateCompositeAccountWithoutAtLeastOneAssociatedSimpleAccount

	self should: [CompositeAccount with: #()] raise: Error withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation ! !
!CompositeAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 20:33:19' prior: 50605849!
test01CantCreateCompositeAccountWithoutAtLeastOneAssociatedSimpleAccount

	self should: [CompositeAccount with: #()] 
		raise: Error 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation ! !
!CompositeAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 20:33:40'!
test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts

	self should: [CompositeAccount with: #()] 
		raise: Error 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation ! !

!methodRemoval: CompositeAccountTest #test01CantCreateCompositeAccountWithoutAtLeastOneAssociatedSimpleAccount stamp: 'IB 5/21/2023 20:33:44'!
test01CantCreateCompositeAccountWithoutAtLeastOneAssociatedSimpleAccount

	self should: [CompositeAccount with: #()] 
		raise: Error 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation !

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:33:45'!
ERROR!

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:33:45'!
ERROR!
!CompositeAccount class methodsFor: 'accessing' stamp: 'IB 5/21/2023 20:34:00'!
cantHaveEmptyCompositeAccountErrorExplanation
	self shouldBeImplemented.! !
!CompositeAccount class methodsFor: 'accessing' stamp: 'IB 5/21/2023 20:35:17' prior: 50605898!
cantHaveEmptyCompositeAccountErrorExplanation
	
	^'A composite account has to have at least one simple account associated to it.'! !

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:35:18'!
FAILURE!

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:35:31'!
FAILURE!

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:35:31'!
FAILURE!
!CompositeAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 20:35:57' prior: 50605869!
test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts

	self should: [CompositeAccount with: #()] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation ! !

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:35:59'!
ERROR!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 20:36:06'!
with: anArray 
	"DO NOT FORGET TO RENAME COLLABORATORS AND REMOVE THIS COMMENT!!!!"
	self shouldBeImplemented.
	^self new initializeWith: anArray ! !
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 20:36:50' prior: 50605940!
with: aCollectionOfSimpleAccounts 
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	^self new initializeWith: aCollectionOfSimpleAccounts ! !

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:36:53'!
ERROR!
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/21/2023 20:37:07'!
assertNotEmpty: aCollectionOfSimpleAccounts 
	self shouldBeImplemented.! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/21/2023 20:37:41' prior: 50605960!
assertNotEmpty: aCollectionOfSimpleAccounts

	aCollectionOfSimpleAccounts 
		ifEmpty: [Error signal: self cantHaveEmptyCompositeAccountErrorExplanation]! !

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:37:42'!
PASSED!

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:37:42'!
PASSED!

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:37:47'!
PASSED!

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 20:45:04'!
PASSED!

----SNAPSHOT----(21 May 2023 20:45:08) CuisUniversity-5706.image priorSource: 8773589!

{}!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 20:59:38'!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	|compositeAccount| 
	compositeAccount := CompositeAccount with: {SimpleAccount new}.! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:00:35' prior: 50605994!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	|simpleAccount compositeAccount| 
	simpleAccount := SimpleAccount new.
	compositeAccount := CompositeAccount with: {simpleAccount}.
	
	self assert: compositeAccount balance equals: simpleAccount balance! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:00:37'!
ERROR!

!classDefinition: #CompositeAccount category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 21:00:55'!
Object subclass: #CompositeAccount
	instanceVariableNames: 'collectionOfSimpleAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/21/2023 21:00:55'!
initializeWith: aCollectionOfSimpleAccounts 
	self shouldBeImplemented.
	collectionOfSimpleAccounts := aCollectionOfSimpleAccounts.! !

!classDefinition: #CompositeAccount category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 21:01:28'!
Object subclass: #CompositeAccount
	instanceVariableNames: 'collectionOfSimpleAccounts associatedAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/21/2023 21:01:21' prior: 50606026!
initializeWith: aCollectionOfSimpleAccounts

	associatedAccounts := aCollectionOfSimpleAccounts.! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:01:30'!
ERROR!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/21/2023 21:01:36'!
balance
	self shouldBeImplemented.! !
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/21/2023 21:02:12' prior: 50606053!
balance
	
	^associatedAccounts first balance! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:02:14'!
PASSED!

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:02:14'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:02:14'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:02:16'!
PASSED!

!testRun: #CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:02:16'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:02:16'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:02:31'!
simpleAccount

	^ SimpleAccount new! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:02:31' prior: 50606002!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	|simpleAccount compositeAccount| 
	simpleAccount := self simpleAccount.
	compositeAccount := CompositeAccount with: {simpleAccount}.
	
	self assert: compositeAccount balance equals: simpleAccount balance! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:02:58' prior: 50606092!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccount.
	compositeAccount := CompositeAccount with: {simpleAccount}.
	
	self assert: compositeAccount balance equals: simpleAccount balance! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:03:31'!
assertBalanceOf: simpleAccount equalsTo: compositeAccount

	^ self assert: compositeAccount balance equals: simpleAccount balance! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:03:31' prior: 50606104!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccount.
	compositeAccount := CompositeAccount with: {simpleAccount}.
	
	self assertBalanceOf: simpleAccount equalsTo: compositeAccount! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:03:40' prior: 50606122!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccount.
	compositeAccount := CompositeAccount with: {simpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:04:05' prior: 50606115!
assertBalanceOf: aCompositeAccount equalsTo: aBalance

	self assert: aCompositeAccount balance equals: aBalance! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:05:18'!
testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts

	self should: [CompositeAccount with: #()] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation ! !

!methodRemoval: CompositeAccountTest #test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:05:18'!
test01CantCreateCompositeAccountWithoutAssociatedSimpleAccounts

	self should: [CompositeAccount with: #()] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:06:19'!
compositeAccountAssociatedWithAllIn: simpleAccount

	^ CompositeAccount with: {simpleAccount}! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:06:19' prior: 50606133!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: simpleAccount.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:06:23' prior: 50606179!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance! !
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 21:06:48' prior: 50606173!
compositeAccountAssociatedWithAllIn: aCollectionOfSimpleAccounts

	^ CompositeAccount with: aCollectionOfSimpleAccounts! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:06:52'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:06:52'!
PASSED!

----SNAPSHOT----(21 May 2023 21:06:55) CuisUniversity-5706.image priorSource: 8778883!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 21:07:51'!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	^self new initializeWith: aCollectionOfSimpleAccounts ! !
!CompositeAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 21:07:51' prior: 50606151!
testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts

	self should: [CompositeAccount associatedWithAllIn: #()] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation ! !
!CompositeAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 21:07:51' prior: 50606203!
compositeAccountAssociatedWithAllIn: aCollectionOfSimpleAccounts

	^ CompositeAccount associatedWithAllIn: aCollectionOfSimpleAccounts! !

!methodRemoval: CompositeAccount class #with: stamp: 'IB 5/21/2023 21:07:51'!
with: aCollectionOfSimpleAccounts 
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	^self new initializeWith: aCollectionOfSimpleAccounts !
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/21/2023 21:08:40'!
initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts

	associatedAccounts := aCollectionOfSimpleAccounts.! !
!CompositeAccount class methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 21:08:40' prior: 50606221!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

!methodRemoval: CompositeAccount #initializeWith: stamp: 'IB 5/21/2023 21:08:40'!
initializeWith: aCollectionOfSimpleAccounts

	associatedAccounts := aCollectionOfSimpleAccounts.!

----SNAPSHOT----(21 May 2023 21:08:46) CuisUniversity-5706.image priorSource: 8786146!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 21:15:59'!
for: aValue

	^self new initializeFor: aValue! !

!methodRemoval: AccountTransaction class #register:on: stamp: 'IB 5/21/2023 21:16:12'!
register: aValue on: account

	| transaction |
	
	transaction := self for: aValue.
	account register: transaction.
		
	^ transaction!

!methodRemoval: Deposit class #for: stamp: 'IB 5/21/2023 21:16:18'!
for: aValue

	^ self new initializeFor: aValue !

!methodRemoval: Withdrawal class #for: stamp: 'IB 5/21/2023 21:16:24'!
for: aValue

	^ self new initializeFor: aValue !

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/21/2023 21:16:33'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesAccountBalance stamp: 'IB 5/21/2023 21:16:33'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawalDecreasesAccountBalance stamp: 'IB 5/21/2023 21:16:33'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/21/2023 21:16:33'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 21:16:33'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/21/2023 21:16:33'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 21:16:33'!
PASSED!
!SimpleAccount methodsFor: 'transactions' stamp: 'IB 5/21/2023 21:17:00' prior: 50604143!
register: aTransaction

	^transactions add: aTransaction 
! !
!SimpleAccountTest methodsFor: 'support - account' stamp: 'IB 5/21/2023 21:17:47' prior: 50605587!
onAccountMakeADepositOf: anAmountToBeDepositedInTheAccount

	 ^self onAccountRegister: (Deposit for: anAmountToBeDepositedInTheAccount)! !
!SimpleAccountTest methodsFor: 'support - account' stamp: 'IB 5/21/2023 21:18:04' prior: 50605720!
onAccountMakeAWithdrawalOf: anAmountToBeWithdrawnFromAnAccount

	 self onAccountRegister: (Withdrawal for: anAmountToBeWithdrawnFromAnAccount)! !
!SimpleAccountTest methodsFor: 'support - account' stamp: 'IB 5/21/2023 21:18:18' prior: 50606336!
onAccountMakeAWithdrawalOf: anAmountToBeWithdrawnFromAnAccount

	 self onAccountRegister: (self withdrawalFor: anAmountToBeWithdrawnFromAnAccount)! !
!SimpleAccountTest methodsFor: 'support - account' stamp: 'IB 5/21/2023 21:20:10' prior: 50606328!
onAccountMakeADepositOf: anAmountToBeDepositedInTheAccount

	 ^self onAccountRegister: (self depositFor: anAmountToBeDepositedInTheAccount)! !

----SNAPSHOT----(21 May 2023 21:20:12) CuisUniversity-5706.image priorSource: 8788007!

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/21/2023 21:20:27'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesAccountBalance stamp: 'IB 5/21/2023 21:20:27'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawalDecreasesAccountBalance stamp: 'IB 5/21/2023 21:20:27'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/21/2023 21:20:27'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 21:20:27'!
FAILURE!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/21/2023 21:20:27'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 21:20:27'!
FAILURE!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 21:20:30'!
FAILURE!

deposit!
!SimpleAccountTest methodsFor: 'support - account' stamp: 'IB 5/21/2023 21:21:04' prior: 50606344!
onAccountMakeAWithdrawalOf: anAmountToBeWithdrawnFromAnAccount

	 ^self onAccountRegister: (self withdrawalFor: anAmountToBeWithdrawnFromAnAccount)! !
!SimpleAccountTest methodsFor: 'support - account' stamp: 'IB 5/21/2023 21:21:11' prior: 50605563!
onAccountRegister: anAccountTransaction

	^account register: anAccountTransaction ! !

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/21/2023 21:21:15'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesAccountBalance stamp: 'IB 5/21/2023 21:21:15'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawalDecreasesAccountBalance stamp: 'IB 5/21/2023 21:21:15'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/21/2023 21:21:15'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 21:21:15'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/21/2023 21:21:15'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 21:21:15'!
PASSED!

----SNAPSHOT----(21 May 2023 21:21:18) CuisUniversity-5706.image priorSource: 8790670!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:23:52'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:23:52'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:23:52'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:26:07'!
testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccount.
	anotherSimpleAccount := self simpleAccount.
	anotherSimpleAccount register: (Deposit for: 100).
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:26:10'!
FAILURE!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/21/2023 21:26:50' prior: 50606058!
balance
	
	^associatedAccounts sum: [:simpleAccount | simpleAccount balance]! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:26:53'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:26:53'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:26:53'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:26:53'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:26:57'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:26:57'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:26:57'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:26:57'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:29:01'!
simpleAccountWithTransactions

	^self simpleAccount;
		register: (Deposit for: 100);
		yourself! !
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 21:29:27'!
emptySimpleAccount

	^ SimpleAccount new! !
!CompositeAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 21:29:27' prior: 50606444!
testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self emptySimpleAccount.
	anotherSimpleAccount := self emptySimpleAccount.
	anotherSimpleAccount register: (Deposit for: 100).
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance! !
!CompositeAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 21:29:27' prior: 50606504!
simpleAccountWithTransactions

	^self emptySimpleAccount;
		register: (Deposit for: 100);
		yourself! !
!CompositeAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/21/2023 21:29:27' prior: 50606191!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance! !

!methodRemoval: CompositeAccountTest #simpleAccount stamp: 'IB 5/21/2023 21:29:27'!
simpleAccount

	^ SimpleAccount new!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:30:30' prior: 50606515!
testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self emptySimpleAccount.
	anotherSimpleAccount := self simpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:30:33'!
ERROR!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:30:57'!
ERROR!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:30:57'!
ERROR!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:31:01'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:31:02'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:31:08'!
ERROR!

self emptySimpleAccount!
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 21:31:29' prior: 50606534!
simpleAccountWithTransactions

	^self emptySimpleAccount
		register: (Deposit for: 100);
		yourself! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:31:31'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:31:31'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:31:31'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:31:31'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:31:34'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:31:34'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:31:34'!
PASSED!

----SNAPSHOT----(21 May 2023 21:31:38) CuisUniversity-5706.image priorSource: 8792889!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:31:53' prior: 50606557!
testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. self simpleAccountWithTransactions}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + self simpleAccountWithTransactions balance! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:30:30' prior: 50606637!
testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self emptySimpleAccount.
	anotherSimpleAccount := self simpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesAccountBalance stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawalDecreasesAccountBalance stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 21:32:12'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:32:15'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:32:15'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:32:15'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:32:15'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:37:10'!
testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assert: compositeAccount transactions equals: simpleAccount transactions! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:37:12'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:37:12'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:37:12'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 21:37:12'!
ERROR!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 21:37:12'!
ERROR!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/21/2023 21:37:26'!
transactions
	self shouldBeImplemented.! !
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/21/2023 21:37:45' prior: 50606761!
transactions
	
	^associatedAccounts first transactions ! !

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 21:37:47'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 21:37:49'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:37:49'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:37:49'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:37:49'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 21:37:49'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:39:36'!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| simpleAccount anotherSimpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assert: compositeAccount transactions equals: simpleAccount transactions! !

1,1!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 21:46:48' prior: 50606797!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| simpleAccount anotherSimpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assert: compositeAccount transactions size equals: 2.
	self assert: (compositeAccount transactions intersection: simpleAccount transactions) equals: simpleAccount transactions.
	self assert: (compositeAccount transactions intersection: anotherSimpleAccount transactions) equals: anotherSimpleAccount transactions! !

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 21:46:56'!
ERROR!
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 21:47:03'!
anotherSimpleAccountWithTransactions
	self shouldBeImplemented.! !
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 21:47:30' prior: 50606844!
anotherSimpleAccountWithTransactions
	
	^self emptySimpleAccount
		register: (Withdrawal for: 50);
		yourself! !

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 21:47:37'!
FAILURE!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/21/2023 21:48:37' prior: 50606766!
transactions
	
	^(associatedAccounts collect: #transactions) flatten! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:48:44'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:48:44'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:48:44'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 21:48:44'!
FAILURE!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 21:48:44'!
FAILURE!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 21:48:49'!
FAILURE!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 21:48:50'!
FAILURE!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/21/2023 21:49:51' prior: 50606861!
transactions
	
	^(associatedAccounts collect: #transactions) flatten asArray! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:49:56'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:49:56'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:49:56'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 21:49:56'!
FAILURE!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 21:49:56'!
FAILURE!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 21:49:59'!
FAILURE!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/21/2023 21:50:31' prior: 50606899!
transactions
	
	^(associatedAccounts collect: #transactions) flatten asOrderedCollection! !

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/21/2023 21:50:34'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesAccountBalance stamp: 'IB 5/21/2023 21:50:34'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawalDecreasesAccountBalance stamp: 'IB 5/21/2023 21:50:34'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/21/2023 21:50:34'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/21/2023 21:50:34'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/21/2023 21:50:34'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/21/2023 21:50:34'!
PASSED!

----SNAPSHOT----(21 May 2023 21:50:37) CuisUniversity-5706.image priorSource: 8799458!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 21:50:41'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 21:50:41'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 21:50:41'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 21:50:41'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 21:50:41'!
PASSED!

----SNAPSHOT----(21 May 2023 21:50:44) CuisUniversity-5706.image priorSource: 8809951!

----SNAPSHOT----(21 May 2023 22:01:31) CuisUniversity-5706.image priorSource: 8810750!

Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Account category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 22:02:26'!
Object subclass: #Account
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #Accountr category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 22:02:34'!
Object subclass: #Accountr
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #SimpleAccount category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 22:02:34'!
Accountr subclass: #SimpleAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #SimpleAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #SimpleAccount category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 22:02:43'!
Account subclass: #SimpleAccount
	instanceVariableNames: 'transactions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classRemoval: #Accountr stamp: 'IB 5/21/2023 22:02:48'!
Object subclass: #Accountr
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

Account subclass: #CompositeAccount
	instanceVariableNames: 'collectionOfSimpleAccounts associatedAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #CompositeAccount category: 'Portfolio-Ejercicio' stamp: 'IB 5/21/2023 22:03:06'!
Account subclass: #CompositeAccount
	instanceVariableNames: 'collectionOfSimpleAccounts associatedAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!Account methodsFor: 'nil' stamp: 'IB 5/21/2023 22:03:22'!
balance

	self subclassResponsibility ! !
!Account methodsFor: 'accessing' stamp: 'IB 5/21/2023 22:04:02'!
transactions

	self subclassResponsibility ! !

----SNAPSHOT----(21 May 2023 22:04:37) CuisUniversity-5706.image priorSource: 8810838!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/21/2023 22:06:15' prior: 50606255!
initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts

	associatedAccounts := aCollectionOfSimpleAccounts! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 22:12:03'!
testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assert: (compositeAccount hasRegistered: simpleAccount transactions first)! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 22:12:05'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 22:12:05'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 22:12:05'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:12:05'!
ERROR!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 22:12:05'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 22:12:05'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:12:05'!
ERROR!
!CompositeAccount methodsFor: 'testing' stamp: 'IB 5/21/2023 22:12:12'!
hasRegistered: aRenameMe1 
	self shouldBeImplemented.! !
!CompositeAccount methodsFor: 'testing' stamp: 'IB 5/21/2023 22:12:46' prior: 50607113!
hasRegistered: anAccountTransaction

	^self transactions first = anAccountTransaction ! !
!CompositeAccount methodsFor: 'testing' stamp: 'IB 5/21/2023 22:13:06' prior: 50607118!
hasRegistered: anAccountTransaction

	^true! !

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:13:09'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:13:11'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 22:13:11'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 22:13:11'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 22:13:11'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:13:11'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 22:13:11'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 22:13:11'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 22:14:38'!
testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self deny: (compositeAccount hasRegistered: (Withdrawal for: 50))! !

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:14:39'!
FAILURE!
!CompositeAccount methodsFor: 'testing' stamp: 'IB 5/21/2023 22:15:27' prior: 50607124!
hasRegistered: anAccountTransaction

	^self transactions first = anAccountTransaction! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 22:15:35'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 22:15:35'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 22:15:35'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:15:35'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:15:35'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 22:15:35'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 22:15:35'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 22:16:43'!
testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts

	| simpleAccount anotherSimpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assert: (compositeAccount hasRegistered: simpleAccount transactions first).
	self assert: (compositeAccount hasRegistered: anotherSimpleAccount transactions first)! !

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 22:16:49'!
FAILURE!
!CompositeAccount methodsFor: 'testing' stamp: 'IB 5/21/2023 22:17:33' prior: 50607182!
hasRegistered: anAccountTransaction

	^self transactions includes: anAccountTransaction! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 22:17:52'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 22:17:52'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 22:17:52'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:17:52'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:17:52'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 22:17:52'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 22:17:52'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 22:17:52'!
PASSED!

----SNAPSHOT----(21 May 2023 22:17:55) CuisUniversity-5706.image priorSource: 8813070!
!CompositeAccount methodsFor: 'testing' stamp: 'IB 5/21/2023 22:19:27' prior: 50607243!
hasRegistered: anAccountTransaction

	^associatedAccounts anySatisfy: [:simpleAccount | simpleAccount hasRegistered: anAccountTransaction]! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 22:20:25'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 22:20:25'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 22:20:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:20:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 22:20:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 22:20:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 22:20:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 22:20:25'!
PASSED!

----SNAPSHOT----(21 May 2023 22:20:28) CuisUniversity-5706.image priorSource: 8820287!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 23:21:36'!
testCantCreateCompositeAccountWithTheSameSimpleAccountTwice

	|simpleAccount|
	
	simpleAccount := self emptySimpleAccount.

	self should: [CompositeAccount associatedWithAllIn: {simpleAccount. simpleAccount}] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:21:39'!
ERROR!
!CompositeAccount class methodsFor: 'accessing' stamp: 'IB 5/21/2023 23:21:48'!
sameAccountAssociatedMoreThanOnceErrorExplanation
	self shouldBeImplemented.! !
!CompositeAccount class methodsFor: 'accessing' stamp: 'IB 5/21/2023 23:22:13' prior: 50607352!
sameAccountAssociatedMoreThanOnceErrorExplanation
	
	^'Cant have the same account associated more than one time'! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:22:15'!
FAILURE!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 23:23:55' prior: 50606262!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	aCollectionOfSimpleAccounts first = aCollectionOfSimpleAccounts second 
		ifTrue: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:24:19'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:24:19'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:25:45'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:25:45'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 23:27:22'!
testCantCreateCompositeAccountWithARepeatedSimpleAccount

	|simpleAccount|
	
	simpleAccount := self emptySimpleAccount.

	self should: [CompositeAccount associatedWithAllIn: {self anotherSimpleAccountWithTransactions. simpleAccount. simpleAccount}] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:27:26'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:27:26'!
ERROR!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithARepeatedSimpleAccount stamp: 'IB 5/21/2023 23:27:26'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:27:26'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:27:26'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:27:26'!
ERROR!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:27:26'!
ERROR!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:27:26'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:27:26'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:27:26'!
ERROR!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:27:32'!
ERROR!

!methodRemoval: CompositeAccountTest #testCantCreateCompositeAccountWithARepeatedSimpleAccount stamp: 'IB 5/21/2023 23:27:50'!
testCantCreateCompositeAccountWithARepeatedSimpleAccount

	|simpleAccount|
	
	simpleAccount := self emptySimpleAccount.

	self should: [CompositeAccount associatedWithAllIn: {self anotherSimpleAccountWithTransactions. simpleAccount. simpleAccount}] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:27:53'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:27:53'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:27:59'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:27:59'!
ERROR!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:27:59'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:27:59'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:27:59'!
ERROR!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:27:59'!
ERROR!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:27:59'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:27:59'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:27:59'!
ERROR!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 23:28:58' prior: 50607370!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	aCollectionOfSimpleAccounts asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:30:26'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:30:26'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:30:26'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:30:26'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:30:26'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:30:26'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:30:26'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:30:26'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:30:26'!
PASSED!

----SNAPSHOT----(21 May 2023 23:30:30) CuisUniversity-5706.image priorSource: 8821778!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 23:32:42'!
testCantCreateCompositeAccountWithTheSameCompositeAccountTwice

	|compositeAccount|
	
	compositeAccount := self compositeAccount.

	self should: [CompositeAccount associatedWithAllIn: {compositeAccount. compositeAccount}] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:32:44'!
ERROR!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:35:40'!
ERROR!
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 23:35:45'!
compositeAccount
	self shouldBeImplemented.! !
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 23:37:41' prior: 50607608!
compositeAccount
	
	self compositeAccountAssociatedWithAllIn: {self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions }! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:37:42'!
PASSED!

----SNAPSHOT----(21 May 2023 23:37:51) CuisUniversity-5706.image priorSource: 8829822!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:39:48'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:39:48'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 23:42:47'!
testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated

	|compositeAccount anotherCompositeAccountWithTheSameSimpleAccounts|
	
	compositeAccount := self compositeAccount.
	anotherCompositeAccountWithTheSameSimpleAccounts := self compositeAccount.
	
	self should: [CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccountWithTheSameSimpleAccounts}] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:42:49'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:42:49'!
PASSED!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 23:43:46' prior: 50607529!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	aCollectionOfSimpleAccounts asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [self halt.Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

aCollectionOfSimpleAccounts asSet size = aCollectionOfSimpleAccounts size !

aCollectionOfSimpleAccounts!

aCollectionOfSimpleAccounts asSet!

aCollectionOfSimpleAccounts asSet size!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/21/2023 23:46:39' overrides: 16901772!
= anObject
	
	^self == anObject! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:46:41'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:46:41'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:46:41'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:46:41'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:46:41'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:46:41'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:46:41'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:46:41'!
PASSED!

aCollectionOfSimpleAccounts asSet size !

aCollectionOfSimpleAccounts first!

!methodRemoval: CompositeAccount #= stamp: 'IB 5/21/2023 23:47:40'!
= anObject
	
	^self == anObject!
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/21/2023 23:47:47' prior: 50607613!
compositeAccount
	
	^self compositeAccountAssociatedWithAllIn: {self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions }! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:47:54'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:47:54'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:47:54'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:47:54'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:47:54'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:47:54'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:47:54'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:47:54'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:47:54'!
PASSED!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 23:48:08' prior: 50607797!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	aCollectionOfSimpleAccounts asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:48:17'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:48:17'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:48:17'!
FAILURE!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 23:52:39' prior: 50607913!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	|accounts|
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	accounts := aCollectionOfSimpleAccounts 
		collect: [:account | (account isKindOf: SimpleAccount) 
				ifTrue: [account] 
				ifFalse: [account associatedAccounts]].
	
	accounts asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:52:50'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:52:50'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:52:50'!
ERROR!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:52:50'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:52:50'!
ERROR!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:52:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:52:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:52:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:52:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:52:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:52:50'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:52:59'!
ERROR!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/21/2023 23:53:04'!
associatedAccounts
	self shouldBeImplemented.
	^associatedAccounts! !
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/21/2023 23:53:11' prior: 50608055!
associatedAccounts

	^associatedAccounts! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:53:12'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:53:14'!
FAILURE!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 23:53:42' prior: 50607982!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	|accounts|
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	accounts := aCollectionOfSimpleAccounts 
		collect: [:account | (account isKindOf: SimpleAccount) 
				ifTrue: [account] 
				ifFalse: [account associatedAccounts]].
	self halt.
	accounts asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 23:53:45' prior: 50608075!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	|accounts|
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	accounts := aCollectionOfSimpleAccounts 
		collect: [:account | (account isKindOf: SimpleAccount) 
				ifTrue: [account] 
				ifFalse: [account associatedAccounts]].
	
	accounts asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 23:54:04' prior: 50608095!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	|accounts|
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	accounts := aCollectionOfSimpleAccounts 
		collect: [:account | (account isKindOf: SimpleAccount) 
				ifTrue: [account] 
				ifFalse: [account associatedAccounts]].
	
	accounts flatten asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:54:09'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:54:09'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:54:09'!
FAILURE!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/21/2023 23:54:36' prior: 50608114!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	|accounts|
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	accounts := 
		aCollectionOfSimpleAccounts 
			collect: [:account | (account isKindOf: SimpleAccount) 
					ifTrue: [account] 
					ifFalse: [account associatedAccounts]].
	
	accounts flatten asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:54:58'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:54:58'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:54:58'!
FAILURE!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 23:55:07' prior: 50607721!
testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated

	|compositeAccount anotherCompositeAccountWithTheSameSimpleAccounts|
	
	compositeAccount := self compositeAccount.
	anotherCompositeAccountWithTheSameSimpleAccounts := self compositeAccount.
	
	self should: [self halt. CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccountWithTheSameSimpleAccounts}] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !

accounts!

accounts flatten!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/21/2023 23:59:32' prior: 50608267!
testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated

	|simpleAccount compositeAccount anotherCompositeAccountWithTheSameSimpleAccounts|
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccountWithTheSameSimpleAccounts := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self should: [CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccountWithTheSameSimpleAccounts}] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:59:34'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/21/2023 23:59:34'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/21/2023 23:59:34'!
FAILURE!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:00:25' prior: 50607586!
testCantCreateCompositeAccountWithTheSameCompositeAccountTwice

	|compositeAccount|
	
	compositeAccount := self compositeAccount.

	self should: [self halt.CompositeAccount associatedWithAllIn: {compositeAccount. compositeAccount}] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !

accounts flatten!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/22/2023 00:00:54' prior: 50608188!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	|accounts|
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	accounts := 
		aCollectionOfSimpleAccounts 
			collect: [:account | (account isKindOf: SimpleAccount) 
					ifTrue: [account] 
					ifFalse: [account associatedAccounts]].
	
	accounts flatten asSet size = accounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:00:56'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 00:01:02'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 00:01:02'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:01:08' prior: 50608373!
testCantCreateCompositeAccountWithTheSameCompositeAccountTwice

	|compositeAccount|
	
	compositeAccount := self compositeAccount.

	self should: [CompositeAccount associatedWithAllIn: {compositeAccount. compositeAccount}] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:01:09'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:01:12'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 00:01:12'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:01:12'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:01:23'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:01:23'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:01:23'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:01:23'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:01:23'!
FAILURE!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:01:33'!
FAILURE!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/22/2023 00:02:03' prior: 50608389!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	|accounts|
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	accounts := 
		(aCollectionOfSimpleAccounts 
			collect: [:account | (account isKindOf: SimpleAccount) 
					ifTrue: [account] 
					ifFalse: [account associatedAccounts]]) flatten.
	
	accounts asSet size = accounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:02:05'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:02:08'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:02:08'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:02:08'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:02:08'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 00:02:13'!
PASSED!

----SNAPSHOT----(22 May 2023 00:02:15) CuisUniversity-5706.image priorSource: 8832590!
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/22/2023 00:07:17' prior: 50608568!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	|accounts|
	
	
	
	accounts := 
		(aCollectionOfSimpleAccounts 
			collect: [:account | (account isKindOf: SimpleAccount) 
					ifTrue: [account] 
					ifFalse: [account associatedAccounts]]) flatten.
	
	accounts asSet size = accounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation].
		self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/22/2023 00:07:34'!
assertNoRepeatedAccountsIn: aCollectionOfSimpleAccounts

	|accounts|
	
	
	
	accounts := 
		(aCollectionOfSimpleAccounts 
			collect: [:account | (account isKindOf: SimpleAccount) 
					ifTrue: [account] 
					ifFalse: [account associatedAccounts]]) flatten.
	
	accounts asSet size = accounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/22/2023 00:07:34' prior: 50608662!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	self assertNoRepeatedAccountsIn: aCollectionOfSimpleAccounts.
		self assertNotEmpty: aCollectionOfSimpleAccounts.
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/22/2023 00:07:44' prior: 50608697!
associatedWithAllIn: aCollectionOfSimpleAccounts 
	
	self assertNotEmpty: aCollectionOfSimpleAccounts.
	self assertNoRepeatedAccountsIn: aCollectionOfSimpleAccounts.
	
	^self new initializeAssociatedWithAllIn: aCollectionOfSimpleAccounts ! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:07:56' prior: 50608681!
assertNoRepeatedAccountsIn: aCollectionOfSimpleAccounts

	|accounts|
	
	accounts := 
		(aCollectionOfSimpleAccounts 
			collect: [:account | (account isKindOf: SimpleAccount) 
					ifTrue: [account] 
					ifFalse: [account associatedAccounts]]) flatten.
	
	accounts asSet size = accounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:08:29'!
simpleAccountsIn: aCollectionOfSimpleAccounts

	^ (aCollectionOfSimpleAccounts 
			collect: [:account | (account isKindOf: SimpleAccount) 
					ifTrue: [account] 
					ifFalse: [account associatedAccounts]]) flatten! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:08:29' prior: 50608719!
assertNoRepeatedAccountsIn: aCollectionOfSimpleAccounts

	|accounts|
	
	accounts := 
		self simpleAccountsIn: aCollectionOfSimpleAccounts.
	
	accounts asSet size = accounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !
!CompositeAccount class methodsFor: 'instance creation' stamp: 'IB 5/22/2023 00:08:43' prior: 50608708!
associatedWithAllIn: aCollectionOfAccounts 
	
	self assertNotEmpty: aCollectionOfAccounts.
	self assertNoRepeatedAccountsIn: aCollectionOfAccounts.
	
	^self new initializeAssociatedWithAllIn: aCollectionOfAccounts ! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:08:50' prior: 50608744!
assertNoRepeatedAccountsIn: aCollectionOfAccounts

	|accounts|
	
	accounts := 
		self simpleAccountsIn: aCollectionOfAccounts.
	
	accounts asSet size = accounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:08:54' prior: 50605966!
assertNotEmpty: aCollectionOfAccounts

	aCollectionOfAccounts 
		ifEmpty: [Error signal: self cantHaveEmptyCompositeAccountErrorExplanation]! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:09:00' prior: 50608734!
simpleAccountsIn: aCollectionOfAccounts

	^ (aCollectionOfAccounts 
			collect: [:account | (account isKindOf: SimpleAccount) 
					ifTrue: [account] 
					ifFalse: [account associatedAccounts]]) flatten! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:09:12' prior: 50608785!
simpleAccountsIn: aCollectionOfAccounts

	^ (aCollectionOfAccounts 
		collect: [:account | (account isKindOf: SimpleAccount) 
					ifTrue: [account] 
					ifFalse: [account associatedAccounts]]) flatten! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:09:20' prior: 50608795!
simpleAccountsIn: aCollectionOfAccounts

	^ (aCollectionOfAccounts 
		collect: [:account | (account isKindOf: SimpleAccount) 
			ifTrue: [account] 
			ifFalse: [account associatedAccounts]]) flatten! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:09:37' prior: 50608805!
simpleAccountsIn: aCollectionOfAccounts

	^ (aCollectionOfAccounts 
		collect: [:account | 
			(account isKindOf: SimpleAccount) 
				ifTrue: [account] 
				ifFalse: [account associatedAccounts]]) flatten! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:09:47' prior: 50608766!
assertNoRepeatedAccountsIn: aCollectionOfAccounts

	|accounts|
	
	accounts := self simpleAccountsIn: aCollectionOfAccounts.
	
	accounts asSet size = accounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 00:10:25'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 00:10:25'!
PASSED!
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:13:37' prior: 50608815!
simpleAccountsIn: aCollectionOfAccounts

	^ (aCollectionOfAccounts collect: [:account | account associatedAccounts]) flatten! !
!SimpleAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:14:04'!
associatedAccounts

	^{self}! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 00:14:10'!
PASSED!

----SNAPSHOT----(22 May 2023 00:14:25) CuisUniversity-5706.image priorSource: 8864246!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 00:14:27'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 00:14:27'!
PASSED!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:15:31' prior: 50608463!
testCantCreateCompositeAccountWithTheSameCompositeAccountTwice

	|compositeAccoun aBlockThatCreatesAnCompositeAccountt|
	
	compositeAccount := self compositeAccount.

	aBlockThatCreatesAnCompositeAccount := [CompositeAccount associatedWithAllIn: {compositeAccount. compositeAccount}].
	self should: aBlockThatCreatesAnCompositeAccount 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:15:55' prior: 50609000!
testCantCreateCompositeAccountWithTheSameCompositeAccountTwice

	|compositeAccount aBlockThatCreatesAnCompositeAccount|
	
	compositeAccount := self compositeAccount.

	aBlockThatCreatesAnCompositeAccount := [CompositeAccount associatedWithAllIn: {compositeAccount. compositeAccount}].
	
	self should: aBlockThatCreatesAnCompositeAccount 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:16:24' prior: 50607334!
testCantCreateCompositeAccountWithTheSameSimpleAccountTwice

	|simpleAccoun aBlockThatCreatesACompositeAccountt|
	
	simpleAccount := self emptySimpleAccount.

	aBlockThatCreatesACompositeAccount := [CompositeAccount associatedWithAllIn: {simpleAccount. simpleAccount}].
	self should: aBlockThatCreatesACompositeAccount 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:16:33' prior: 50609036!
testCantCreateCompositeAccountWithTheSameSimpleAccountTwice

	|simpleAccount aBlockThatCreatesACompositeAccount|
	
	simpleAccount := self emptySimpleAccount.

	aBlockThatCreatesACompositeAccount := [CompositeAccount associatedWithAllIn: {simpleAccount. simpleAccount}].
	self should: aBlockThatCreatesACompositeAccount 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:16:56' prior: 50608289!
testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated

	|simpleAccount compositeAccount anotherCompositeAccountWithTheSameSimpleAccounts aBlockThatCreatesACompositeAccount|
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccountWithTheSameSimpleAccounts := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	aBlockThatCreatesACompositeAccount := [CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccountWithTheSameSimpleAccounts}] .
	
	self should: aBlockThatCreatesACompositeAccount
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:17:08' prior: 50606230!
testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts

	| aBlockThatCreatesACompositeAccount |
	aBlockThatCreatesACompositeAccount := [CompositeAccount associatedWithAllIn: #()].
	self should: aBlockThatCreatesACompositeAccount 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation ! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:17:45' prior: 50609098!
testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts

	self should: [CompositeAccount associatedWithAllIn: #()] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation ! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:18:48'!
shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: aBlockThatCreatesACompositeAccount

	^ self should: aBlockThatCreatesACompositeAccount
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount sameAccountAssociatedMoreThanOnceErrorExplanation! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:18:48' prior: 50609070!
testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated

	|simpleAccount compositeAccount anotherCompositeAccountWithTheSameSimpleAccounts aBlockThatCreatesACompositeAccount|
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccountWithTheSameSimpleAccounts := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	aBlockThatCreatesACompositeAccount := [CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccountWithTheSameSimpleAccounts}] .
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: aBlockThatCreatesACompositeAccount 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:19:29' prior: 50609053!
testCantCreateCompositeAccountWithTheSameSimpleAccountTwice

	|simpleAccount aBlockThatCreatesACompositeAccount|
	
	simpleAccount := self emptySimpleAccount.

	aBlockThatCreatesACompositeAccount := [CompositeAccount associatedWithAllIn: {simpleAccount. simpleAccount}].
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: aBlockThatCreatesACompositeAccount 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:19:44' prior: 50609018!
testCantCreateCompositeAccountWithTheSameCompositeAccountTwice

	|compositeAccount aBlockThatCreatesACompositeAccount|
	
	compositeAccount := self compositeAccount.

	aBlockThatCreatesACompositeAccount := [CompositeAccount associatedWithAllIn: {compositeAccount. compositeAccount}].
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: aBlockThatCreatesACompositeAccount 
	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:19:51' prior: 50609177!
testCantCreateCompositeAccountWithTheSameCompositeAccountTwice

	|compositeAccount |
	
	compositeAccount := self compositeAccount.

	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: [CompositeAccount associatedWithAllIn: {compositeAccount. compositeAccount}] 
	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:20:01' prior: 50609162!
testCantCreateCompositeAccountWithTheSameSimpleAccountTwice

	|simpleAccount |
	
	simpleAccount := self emptySimpleAccount.

	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: [CompositeAccount associatedWithAllIn: {simpleAccount. simpleAccount}] 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:20:11' prior: 50609136!
testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated

	|simpleAccount compositeAccount anotherCompositeAccountWithTheSameSimpleAccounts |
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccountWithTheSameSimpleAccounts := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: [CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccountWithTheSameSimpleAccounts}] 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:20:14' prior: 50609217!
testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated

	|simpleAccount compositeAccount anotherCompositeAccountWithTheSameSimpleAccounts |
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccountWithTheSameSimpleAccounts := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: [CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccountWithTheSameSimpleAccounts}] 

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:20:17' prior: 50609239!
testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated

	|simpleAccount compositeAccount anotherCompositeAccountWithTheSameSimpleAccounts |
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccountWithTheSameSimpleAccounts := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: 
		[CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccountWithTheSameSimpleAccounts}] 

	! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:20:31'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:20:31'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:20:31'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:20:31'!
PASSED!

----SNAPSHOT----(22 May 2023 00:20:34) CuisUniversity-5706.image priorSource: 8873466!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:28:51'!
testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasInASecondLevelTheSameAccountThatTheOtherOneInTheFirst

	|simpleAccount compositeAccount anotherCompositeAccount compositeAccountWithTheSameSimpleAccountThatTheFirstOne |
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	compositeAccountWithTheSameSimpleAccountThatTheFirstOne := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccount := self compositeAccountAssociatedWithAllIn: {compositeAccountWithTheSameSimpleAccountThatTheFirstOne}.
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: 
		[CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccount}] 

	! !

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasInASecondLevelTheSameAccountThatTheOtherOneInTheFirst stamp: 'IB 5/22/2023 00:28:54'!
FAILURE!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:30:07' prior: 50608060!
associatedAccounts

	^(associatedAccounts collect: #associatedAccounts) flatten! !

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:30:16'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:30:16'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:30:16'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:30:16'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasInASecondLevelTheSameAccountThatTheOtherOneInTheFirst stamp: 'IB 5/22/2023 00:30:16'!
PASSED!

----SNAPSHOT----(22 May 2023 00:30:20) CuisUniversity-5706.image priorSource: 8884796!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:31:08'!
testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasInTheSameAccountThatTheOtherOneButInADifferentLevel

	|simpleAccount compositeAccount anotherCompositeAccount compositeAccountWithTheSameSimpleAccountThatTheFirstOne |
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	compositeAccountWithTheSameSimpleAccountThatTheFirstOne := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccount := self compositeAccountAssociatedWithAllIn: {compositeAccountWithTheSameSimpleAccountThatTheFirstOne}.
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: 
		[CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccount}] 

	! !

!methodRemoval: CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasInASecondLevelTheSameAccountThatTheOtherOneInTheFirst stamp: 'IB 5/22/2023 00:31:08'!
testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasInASecondLevelTheSameAccountThatTheOtherOneInTheFirst

	|simpleAccount compositeAccount anotherCompositeAccount compositeAccountWithTheSameSimpleAccountThatTheFirstOne |
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	compositeAccountWithTheSameSimpleAccountThatTheFirstOne := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccount := self compositeAccountAssociatedWithAllIn: {compositeAccountWithTheSameSimpleAccountThatTheFirstOne}.
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: 
		[CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccount}] 

	!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:31:31'!
testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel

	|simpleAccount compositeAccount anotherCompositeAccount compositeAccountWithTheSameSimpleAccountThatTheFirstOne |
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	compositeAccountWithTheSameSimpleAccountThatTheFirstOne := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccount := self compositeAccountAssociatedWithAllIn: {compositeAccountWithTheSameSimpleAccountThatTheFirstOne}.
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: 
		[CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccount}] 

	! !

!methodRemoval: CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasInTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 00:31:31'!
testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasInTheSameAccountThatTheOtherOneButInADifferentLevel

	|simpleAccount compositeAccount anotherCompositeAccount compositeAccountWithTheSameSimpleAccountThatTheFirstOne |
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	compositeAccountWithTheSameSimpleAccountThatTheFirstOne := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	anotherCompositeAccount := self compositeAccountAssociatedWithAllIn: {compositeAccountWithTheSameSimpleAccountThatTheFirstOne}.
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: 
		[CompositeAccount associatedWithAllIn: {compositeAccount. anotherCompositeAccount}] 

	!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:36:44'!
testCanAddAnAccountToAnAlreadyCreatedCompositeAccount

	|compositeAccount |
	
	compositeAccount := self compositeAccount.
	
	compositeAccount associateWith: self emptySimpleAccount.
	
	self assert: compositeAccount associatedAccounts includes: self emptySimpleAccount

	! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:36:53' prior: 50609485!
testCanAddAnAccountToAnAlreadyCreatedCompositeAccount

	|compositeAccount |
	
	compositeAccount := self compositeAccount.
	
	compositeAccount associateWith: self emptySimpleAccount.
	
	self assert: compositeAccount associatedAccounts includes: self emptySimpleAccount! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:36:53'!
ERROR!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/22/2023 00:37:14'!
associateWith: aRenameMe1 
	self shouldBeImplemented.! !
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/22/2023 00:39:01' prior: 50609512!
associateWith: anAccountToBeAddedAsAssociation

	self become: 
		(CompositeAccount associatedWithAllIn: (associatedAccounts copy add: anAccountToBeAddedAsAssociation))! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:39:06'!
ERROR!

associatedAccounts!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/22/2023 00:40:52' prior: 50609517!
associateWith: anAccountToBeAddedAsAssociation

	

	self become: 
		(CompositeAccount associatedWithAllIn: (associatedAccounts asOrderedCollection add: anAccountToBeAddedAsAssociation))! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:40:55'!
ERROR!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/22/2023 00:41:17' prior: 50609530!
associateWith: anAccountToBeAddedAsAssociation

	

	self become: 
		(CompositeAccount associatedWithAllIn: (associatedAccounts asOrderedCollection add: anAccountToBeAddedAsAssociation; yourself))! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:41:19'!
FAILURE!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:42:05' prior: 50609497!
testCanAddAnAccountToAnAlreadyCreatedCompositeAccount

	| simpleAccount compositeAccount |
	
	compositeAccount := self compositeAccount.
	simpleAccount := self emptySimpleAccount.
	
	compositeAccount associateWith: simpleAccount.
	
	self assert: compositeAccount associatedAccounts includes: self emptySimpleAccount! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:42:07'!
FAILURE!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:42:19' prior: 50609557!
testCanAddAnAccountToAnAlreadyCreatedCompositeAccount

	| simpleAccount compositeAccount |
	
	compositeAccount := self compositeAccount.
	simpleAccount := self emptySimpleAccount.
	
	compositeAccount associateWith: simpleAccount.
	
	self assert: compositeAccount associatedAccounts includes: simpleAccount! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 00:42:20'!
PASSED!

----SNAPSHOT----(22 May 2023 00:42:24) CuisUniversity-5706.image priorSource: 8886904!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:43:29'!
testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts

	self should: [CompositeAccount associatedWithAllIn: #()] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation ! !

!methodRemoval: CompositeAccountTest #testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts stamp: 'IB 5/22/2023 00:43:29'!
testCantCreateCompositeAccountWithoutAssociatedSimpleAccounts

	self should: [CompositeAccount associatedWithAllIn: #()] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount cantHaveEmptyCompositeAccountErrorExplanation !

----SNAPSHOT----(22 May 2023 00:43:44) CuisUniversity-5706.image priorSource: 8895987!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/22/2023 00:43:54' prior: 50609543!
associateWith: anAccountToBeAddedAsAssociation

	self become: 
		(CompositeAccount associatedWithAllIn: (associatedAccounts asOrderedCollection add: anAccountToBeAddedAsAssociation; yourself))! !
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:44:21'!
associatedSimpleAccounts

	^(associatedAccounts collect: #associatedAccounts) flatten! !

!methodRemoval: CompositeAccount #associatedAccounts stamp: 'IB 5/22/2023 00:44:25'!
associatedAccounts

	^(associatedAccounts collect: #associatedAccounts) flatten!
!SimpleAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:44:46'!
associatedSimpleAccounts

	^{self}! !

!methodRemoval: SimpleAccount #associatedAccounts stamp: 'IB 5/22/2023 00:44:51'!
associatedAccounts

	^{self}!
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:45:46' prior: 50608886!
simpleAccountsIn: aCollectionOfAccounts

	^ (aCollectionOfAccounts collect: [:account | account associatedSimpleAccounts]) flatten! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:45:58' prior: 50609574!
testCanAddAnAccountToAnAlreadyCreatedCompositeAccount

	| simpleAccount compositeAccount |
	
	compositeAccount := self compositeAccount.
	simpleAccount := self emptySimpleAccount.
	
	compositeAccount associateWith: simpleAccount.
	
	self assert: compositeAccount associatedSimpleAccounts includes: simpleAccount! !
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 00:46:10' prior: 50609714!
testCanAddAnAccountToAnAlreadyCreatedCompositeAccount

	| simpleAccount compositeAccount |
	
	compositeAccount := self compositeAccount.
	simpleAccount := self emptySimpleAccount.
	
	compositeAccount associateWith: simpleAccount.
	
	self assert: compositeAccount associatedAccounts includes: simpleAccount! !
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:46:35' prior: 50609688!
associatedSimpleAccounts

	^(associatedAccounts collect: #associatedSimpleAccounts) flatten! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:47:10'!
ERROR!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:47:14'!
associatedAccounts
	self shouldBeImplemented.
	^associatedAccounts! !
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:47:18' prior: 50609750!
associatedAccounts
	
	^associatedAccounts! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 00:47:19'!
PASSED!

----SNAPSHOT----(22 May 2023 00:47:23) CuisUniversity-5706.image priorSource: 8896783!

----SNAPSHOT----(22 May 2023 00:47:29) CuisUniversity-5706.image priorSource: 8901514!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:47:36' prior: 50606932 overrides: 50607055!
transactions
	
	^(self associatedAccounts collect: #transactions) flatten asOrderedCollection! !
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:47:47' prior: 50606466 overrides: 50607051!
balance
	
	^self associatedAccounts sum: #balance! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:47:51'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:47:51'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:47:51'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:47:51'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 00:47:51'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 00:47:51'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 00:47:56'!
PASSED!

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/22/2023 00:47:58'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesAccountBalance stamp: 'IB 5/22/2023 00:47:58'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawalDecreasesAccountBalance stamp: 'IB 5/22/2023 00:47:59'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/22/2023 00:47:59'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/22/2023 00:47:59'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/22/2023 00:47:59'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/22/2023 00:47:59'!
PASSED!

----SNAPSHOT----(22 May 2023 00:48:01) CuisUniversity-5706.image priorSource: 8901602!
!CompositeAccount methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:48:36' prior: 50609740!
associatedSimpleAccounts

	^(self associatedAccounts collect: #associatedSimpleAccounts) flatten! !
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/22/2023 00:50:13' prior: 50607063!
initializeAssociatedWithAllIn: aCollectionOfAccounts

	associatedAccounts := aCollectionOfAccounts! !
!CompositeAccount class methodsFor: 'accessing' stamp: 'IB 5/22/2023 00:50:59'!
emptyCompositeAccountErrorExplanation
	
	^'A composite account has to have at least one simple account associated to it.'! !
!CompositeAccountTest methodsFor: 'as yet unclassified' stamp: 'IB 5/22/2023 00:50:59' prior: 50609653!
testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts

	self should: [CompositeAccount associatedWithAllIn: #()] 
		raise: Error - MessageNotUnderstood 
		withMessageText: CompositeAccount emptyCompositeAccountErrorExplanation ! !
!CompositeAccount class methodsFor: 'as yet unclassified' stamp: 'IB 5/22/2023 00:50:59' prior: 50608777!
assertNotEmpty: aCollectionOfAccounts

	aCollectionOfAccounts 
		ifEmpty: [Error signal: self emptyCompositeAccountErrorExplanation]! !

!methodRemoval: CompositeAccount class #cantHaveEmptyCompositeAccountErrorExplanation stamp: 'IB 5/22/2023 00:50:59'!
cantHaveEmptyCompositeAccountErrorExplanation
	
	^'A composite account has to have at least one simple account associated to it.'!
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:52:07' prior: 50608825!
assertNoRepeatedAccountsIn: aCollectionOfAccounts

	|simpleAccounts|
	
	simpleAccounts := self simpleAccountsIn: aCollectionOfAccounts.
	
	simpleAccounts asSet size = simpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:56:00'!
assertNoRepeatedSimpleAccountsIn: simpleAccounts

	^ simpleAccounts asSet size = simpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:56:00' prior: 50610005!
assertNoRepeatedAccountsIn: aCollectionOfAccounts

	|simpleAccounts|
	
	simpleAccounts := self simpleAccountsIn: aCollectionOfAccounts.
	
	self assertNoRepeatedSimpleAccountsIn: simpleAccounts! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:56:39' prior: 50610017!
assertNoRepeatedSimpleAccountsIn: aCollectionOfSimpleAccounts

	^ aCollectionOfSimpleAccounts asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:57:17' prior: 50610026!
assertNoRepeatedAccountsIn: aCollectionOfAccounts

	| simpleAccounts |
	
	simpleAccounts := self simpleAccountsIn: aCollectionOfAccounts.
	
	self assertNoRepeatedSimpleAccountsIn: simpleAccounts! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 00:59:53' prior: 50610036!
assertNoRepeatedSimpleAccountsIn: aCollectionOfSimpleAccounts

	aCollectionOfSimpleAccounts asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !

!methodRemoval: CompositeAccount class #assertNoRepeatedSimpleAccountsIn: stamp: 'IB 5/22/2023 01:01:58'!
assertNoRepeatedSimpleAccountsIn: aCollectionOfSimpleAccounts

	aCollectionOfSimpleAccounts asSet size = aCollectionOfSimpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]!
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 01:01:58' prior: 50610047!
assertNoRepeatedAccountsIn: aCollectionOfAccounts

	| simpleAccounts |
	
	simpleAccounts := self simpleAccountsIn: aCollectionOfAccounts.
	
	simpleAccounts asSet size = simpleAccounts size 
		ifFalse: [Error signal: self sameAccountAssociatedMoreThanOnceErrorExplanation]! !
!CompositeAccount class methodsFor: 'asserting' stamp: 'IB 5/22/2023 01:02:31' prior: 50609707!
simpleAccountsIn: aCollectionOfAccounts

	^ (aCollectionOfAccounts collect: #associatedSimpleAccounts) flatten! !

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 01:02:38'!
PASSED!

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/22/2023 01:02:42'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesAccountBalance stamp: 'IB 5/22/2023 01:02:42'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawalDecreasesAccountBalance stamp: 'IB 5/22/2023 01:02:42'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/22/2023 01:02:42'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/22/2023 01:02:42'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/22/2023 01:02:42'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/22/2023 01:02:42'!
PASSED!
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/22/2023 01:04:45' prior: 50609679!
associateWith: anAccountToBeAddedAsAssociation

	self become: 
		(CompositeAccount associatedWithAllIn: 
			(associatedAccounts asOrderedCollection add: anAccountToBeAddedAsAssociation; yourself))! !
!CompositeAccount methodsFor: 'initialization' stamp: 'IB 5/22/2023 01:05:11' prior: 50610181!
associateWith: anAccountToBeAssociatedToTheCompositeAccount

	self become: 
		(CompositeAccount associatedWithAllIn: 
			(associatedAccounts asOrderedCollection add: anAccountToBeAssociatedToTheCompositeAccount; yourself))! !
!SimpleAccount methodsFor: 'balance' stamp: 'IB 5/22/2023 01:08:11' prior: 50605804 overrides: 50607051!
balance

	^ transactions sum: #amountAsSeenFromParty ifEmpty: [ 0 ]! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 01:08:23'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 01:08:23'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 01:08:23'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 01:08:23'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 01:08:23'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 01:08:23'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:08:27'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:08:27'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 01:08:27'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:08:27'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 01:08:27'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 01:08:30'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 01:08:30'!
PASSED!

Account subclass: #CompositeAccount
	instanceVariableNames: 'associatedAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!

!classDefinition: #CompositeAccount category: 'Portfolio-Ejercicio' stamp: 'IB 5/22/2023 01:08:57'!
Account subclass: #CompositeAccount
	instanceVariableNames: 'associatedAccounts'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Ejercicio'!
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/22/2023 01:12:10' prior: 50607863!
compositeAccount
	
	^self compositeAccountAssociatedWithAllIn: 
		{self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions }! !
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/22/2023 01:12:43' prior: 50610281!
compositeAccount
	
	^self compositeAccountAssociatedWithAllIn: 
		{self simpleAccountWithTransactions. self simpleAccountWithTransactions }! !
!CompositeAccountTest methodsFor: 'support' stamp: 'IB 5/22/2023 01:13:01' prior: 50610289!
compositeAccount
	
	^self compositeAccountAssociatedWithAllIn: 
		{self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions }! !
!CompositeAccountTest methodsFor: 'tests - balance' stamp: 'IB 5/22/2023 01:13:51' prior: 50606652!
testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance! !
!CompositeAccountTest methodsFor: 'tests - balance' stamp: 'IB 5/22/2023 01:14:38' prior: 50606541!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance! !
!CompositeAccountTest methodsFor: 'tests - balance' stamp: 'IB 5/22/2023 01:14:45' prior: 50610323!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance! !
!CompositeAccountTest methodsFor: 'tests - balance' stamp: 'IB 5/22/2023 01:15:48'!
testBalanceWhenMoreThanOneSimpleAccountAssociated

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance! !

!methodRemoval: CompositeAccountTest #testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount stamp: 'IB 5/22/2023 01:15:48'!
testBalanceOfCompositeAccountWithMoreThanOneSimpleAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance!
!CompositeAccountTest methodsFor: 'tests - balance' stamp: 'IB 5/22/2023 01:16:23'!
testBalanceWhenOnlyOneAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance! !

!methodRemoval: CompositeAccountTest #testBalanceOfCompositeAccountWithOnlyOneSimpleAccount stamp: 'IB 5/22/2023 01:16:23'!
testBalanceOfCompositeAccountWithOnlyOneSimpleAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance!
!CompositeAccountTest methodsFor: 'tests - balance' stamp: 'IB 5/22/2023 01:16:33'!
testBalanceWhenOnlyOneAssociatedAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance! !

!methodRemoval: CompositeAccountTest #testBalanceWhenOnlyOneAccount stamp: 'IB 5/22/2023 01:16:33'!
testBalanceWhenOnlyOneAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance!
!CompositeAccountTest methodsFor: 'tests - balance' stamp: 'IB 5/22/2023 01:16:50'!
testBalanceWhenMoreThanAssociatedAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance! !

!methodRemoval: CompositeAccountTest #testBalanceWhenMoreThanOneSimpleAccountAssociated stamp: 'IB 5/22/2023 01:16:50'!
testBalanceWhenMoreThanOneSimpleAccountAssociated

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance!
!CompositeAccountTest methodsFor: 'tests - balance' stamp: 'IB 5/22/2023 01:16:58'!
testBalanceWhenMoreThanOneAssociatedAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance! !

!methodRemoval: CompositeAccountTest #testBalanceWhenMoreThanAssociatedAccount stamp: 'IB 5/22/2023 01:16:58'!
testBalanceWhenMoreThanAssociatedAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance!
!CompositeAccountTest methodsFor: 'tests - balance' stamp: 'IB 5/22/2023 01:17:34'!
testBalanceWhenMoreThanOneAccountAssociated

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance! !

!methodRemoval: CompositeAccountTest #testBalanceWhenMoreThanOneAssociatedAccount stamp: 'IB 5/22/2023 01:17:34'!
testBalanceWhenMoreThanOneAssociatedAccount

	| anotherSimpleAccount simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount. anotherSimpleAccount}.
	
	self assertBalanceOf: compositeAccount equalsTo: simpleAccount balance + anotherSimpleAccount balance!
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:19:25'!
testCompositeAccountDoNotKnowsTransactionThatIsNotRegisteredOnItsOnlyAssociatedAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self deny: (compositeAccount hasRegistered: (Withdrawal for: 50))! !

!methodRemoval: CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:19:25'!
testCompositeAccountDoNotKnowsTransactionUnregisteredOnItsOnlyAssociatedAccount

	| simpleAccount compositeAccount | 
	
	simpleAccount := self simpleAccountWithTransactions.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self deny: (compositeAccount hasRegistered: (Withdrawal for: 50))!
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:19:44' prior: 50610535!
testCompositeAccountDoNotKnowsTransactionThatIsNotRegisteredOnItsOnlyAssociatedAccount

	| compositeAccount | 
	
	compositeAccount := self compositeAccountAssociatedWithAllIn: {self simpleAccountWithTransactions}.
	
	self deny: (compositeAccount hasRegistered: (Withdrawal for: 50))! !

----SNAPSHOT----(22 May 2023 01:21:42) CuisUniversity-5706.image priorSource: 8905687!
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:23:38' prior: 50606814!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| simpleAccount anotherSimpleAccount compositeAccount associatedAccounts | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	associatedAccounts := {simpleAccount. anotherSimpleAccount}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccounts.
	
	self assert: compositeAccount transactions size equals: 2.
	self assert: (compositeAccount transactions intersection: simpleAccount transactions) equals: simpleAccount transactions.
	self assert: (compositeAccount transactions intersection: anotherSimpleAccount transactions) equals: anotherSimpleAccount transactions! !
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:25:56' prior: 50610579!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| simpleAccount anotherSimpleAccount compositeAccount associatedAccounts transactions | 
	
	simpleAccount := self simpleAccountWithTransactions.
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	associatedAccounts := {simpleAccount. anotherSimpleAccount}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccounts.
	transactions := {simpleAccount transactions. anotherSimpleAccount transactions} asOrderedCollection flatten.
	
	self assert: compositeAccount transactions size equals: transactions size.
	self assert: (compositeAccount transactions intersection: transactions) equals: transactions.! !

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenMoreThanOneAccountAssociated stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenOnlyOneAssociatedAccount stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionThatIsNotRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 01:25:57'!
PASSED!

----SNAPSHOT----(22 May 2023 01:26:01) CuisUniversity-5706.image priorSource: 8925597!
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:27:27' prior: 50610607!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| anotherSimpleAccount compositeAccount associatedAccounts transactions | 
	
	anotherSimpleAccount := self anotherSimpleAccountWithTransactions.
	associatedAccounts := {self simpleAccountWithTransactions. anotherSimpleAccount}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccounts.
	transactions := {self simpleAccountWithTransactions transactions. anotherSimpleAccount transactions} asOrderedCollection flatten.
	
	self assert: compositeAccount transactions size equals: transactions size.
	self assert: (compositeAccount transactions intersection: transactions) equals: transactions.! !
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:27:50' prior: 50610701!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| compositeAccount associatedAccounts transactions | 
	
	associatedAccounts := {self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccounts.
	transactions := {self simpleAccountWithTransactions transactions. self anotherSimpleAccountWithTransactions transactions} asOrderedCollection flatten.
	
	self assert: compositeAccount transactions size equals: transactions size.
	self assert: (compositeAccount transactions intersection: transactions) equals: transactions.! !
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:28:18' prior: 50610727!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| compositeAccount associatedAccounts transactions | 
	
	associatedAccounts := {self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccounts.
	transactions := (associatedAccounts collect: #transactions) flatten.
	
	self assert: compositeAccount transactions size equals: transactions size.
	self assert: (compositeAccount transactions intersection: transactions) equals: transactions.! !

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:28:20'!
FAILURE!
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:29:43' prior: 50610751!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| compositeAccount associatedAccounts transactions | 
	
	associatedAccounts := {self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccounts.
	transactions := (associatedAccounts collect: #transactions) flatten.
	
	self assert: compositeAccount transactions size equals: transactions size.
	compositeAccount transactions 
		do: [:transaction | self assert: (transactions includes: transaction) ].! !
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:30:49' prior: 50610778!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| compositeAccount associatedAccounts transactions | 
	
	associatedAccounts := {self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccounts.
	transactions := (associatedAccounts collect: #transactions) flatten.
	
	self assert: compositeAccount transactions size equals: transactions size.
	compositeAccount transactions includes: transactions first.
	compositeAccount transactions includes: transactions second! !

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenMoreThanOneAccountAssociated stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenOnlyOneAssociatedAccount stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionThatIsNotRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 01:30:50'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 01:30:50'!
PASSED!
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:31:10' prior: 50610800!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| compositeAccount associatedAccounts transactions | 
	
	associatedAccounts := {self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccounts.
	
	transactions := (associatedAccounts collect: #transactions) flatten.
	self assert: compositeAccount transactions size equals: transactions size.
	compositeAccount transactions includes: transactions first.
	compositeAccount transactions includes: transactions second! !
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:32:25'!
assert: aCompositeAccount hasTheSameTransactionsAs: aCollectionOfAccounts
	
	|transactions|
	
	transactions := (aCollectionOfAccounts collect: #transactions) flatten.
	
	self assert: aCompositeAccount transactions size equals: transactions size.
	aCompositeAccount transactions includes: transactions first.
	aCompositeAccount transactions includes: transactions second! !
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:32:48' prior: 50610887!
testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt

	| compositeAccount associatedAccounts | 
	
	associatedAccounts := {self simpleAccountWithTransactions. self anotherSimpleAccountWithTransactions}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccounts.
	
	self assert: compositeAccount hasTheSameTransactionsAs: associatedAccounts! !
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:34:31' prior: 50610909!
assert: aCompositeAccount hasTheSameTransactionsAs: aCollectionOfAccounts
	
	|transactions|
	
	transactions := (aCollectionOfAccounts collect: #transactions) flatten.
	
	self assert: aCompositeAccount transactions size equals: transactions size.
	aCompositeAccount transactions do: [:transaction | self assert: transactions includes: transactions]! !
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:36:29' prior: 50606726!
testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt

	| associatedAccount compositeAccount | 
	
	associatedAccount := {self simpleAccountWithTransactions}.
	compositeAccount := self compositeAccountAssociatedWithAllIn: associatedAccount.
	
	self assert: compositeAccount hasTheSameTransactionsAs: associatedAccount ! !

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 01:36:33'!
FAILURE!
!CompositeAccountTest methodsFor: 'tests - transactions' stamp: 'IB 5/22/2023 01:36:56' prior: 50610940!
assert: aCompositeAccount hasTheSameTransactionsAs: aCollectionOfAccounts
	
	|transactions|
	
	transactions := (aCollectionOfAccounts collect: #transactions) flatten.
	
	self assert: aCompositeAccount transactions size equals: transactions size.
	aCompositeAccount transactions do: [:transaction | self assert: transactions includes: transaction]! !

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 01:37:01'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 01:37:01'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 01:37:01'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 01:37:01'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 01:37:01'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 01:37:01'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionThatIsNotRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:37:02'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:37:02'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 01:37:02'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:37:02'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 01:37:02'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenMoreThanOneAccountAssociated stamp: 'IB 5/22/2023 01:37:05'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenOnlyOneAssociatedAccount stamp: 'IB 5/22/2023 01:37:05'!
PASSED!

----SNAPSHOT----(22 May 2023 01:37:08) CuisUniversity-5706.image priorSource: 8929482!
!CompositeAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 01:50:14'!
testCantAddAnAccountToAnAlreadyCreatedCompositeAccountWhenItIsAlreadyAssociatedToIt

	| simpleAccount compositeAccount |
	
	simpleAccount := self emptySimpleAccount.
	compositeAccount := self compositeAccountAssociatedWithAllIn: {simpleAccount}.
	
	self shouldFailBecauseOfAssociationsWhenCreatingCompositeAccountWith: [compositeAccount associateWith: simpleAccount]! !

!testRun: #CompositeAccountTest #testCantAddAnAccountToAnAlreadyCreatedCompositeAccountWhenItIsAlreadyAssociatedToIt stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenMoreThanOneAccountAssociated stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenOnlyOneAssociatedAccount stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCantAddAnAccountToAnAlreadyCreatedCompositeAccountWhenItIsAlreadyAssociatedToIt stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionThatIsNotRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 01:50:16'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenMoreThanOneAccountAssociated stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testBalanceWhenOnlyOneAssociatedAccount stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCanAddAnAccountToAnAlreadyCreatedCompositeAccount stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCantAddAnAccountToAnAlreadyCreatedCompositeAccountWhenItIsAlreadyAssociatedToIt stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameCompositeAccountTwice stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTheSameSimpleAccountTwice stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCantCreateCompositeAccountWithTwoCompositeAccountsThatHaveTheSameSimpleAccountAssociated stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountDoNotKnowsTransactionThatIsNotRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionRegisteredOnItsOnlyAssociatedAccount stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountKnowsTransactionsRegisteredOnItsAssociatedAccounts stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreEqualToTheOnesPresentInTheSimpleAccountsAssociatedToIt stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCompositeAccountTrasactionsAreTheSameAsTheOnlySimpleAccountAssociatedToIt stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenTryingToCreateWithoutAssociatedAccounts stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #CompositeAccountTest #testCreationFailsWhenWhenTryingToAssociateTwoCompositeAccountsWhenOneHasTheSameAccountThatTheOtherOneButInADifferentLevel stamp: 'IB 5/22/2023 01:50:24'!
PASSED!

!testRun: #SimpleAccountTest #test01AccountBalanceIsNothingWhenCreated stamp: 'IB 5/22/2023 01:50:33'!
PASSED!

!testRun: #SimpleAccountTest #test02DepositIncreasesAccountBalance stamp: 'IB 5/22/2023 01:50:33'!
PASSED!

!testRun: #SimpleAccountTest #test03WithdrawalDecreasesAccountBalance stamp: 'IB 5/22/2023 01:50:33'!
PASSED!

!testRun: #SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/22/2023 01:50:33'!
PASSED!

!testRun: #SimpleAccountTest #test05AccountKnowsRegisteredTransactions stamp: 'IB 5/22/2023 01:50:33'!
PASSED!

!testRun: #SimpleAccountTest #test06AccountDoNotKnowUnregisteredTransactions stamp: 'IB 5/22/2023 01:50:33'!
PASSED!

!testRun: #SimpleAccountTest #test07AccountKnowsItsTransactions stamp: 'IB 5/22/2023 01:50:33'!
PASSED!

----SNAPSHOT----(22 May 2023 01:50:50) CuisUniversity-5706.image priorSource: 8940678!

----SNAPSHOT----(22 May 2023 01:52:00) CuisUniversity-5706.image priorSource: 8946273!

----QUIT----(22 May 2023 01:52:03) CuisUniversity-5706.image priorSource: 8946361!

----STARTUP---- (22 May 2023 16:40:18) as /home/iboaretto/Desktop/uba/inge1/linux64/CuisUniversity-5706.image!

!SimpleAccountTest methodsFor: 'tests' stamp: 'IB 5/22/2023 16:40:31'!
test04WithdrawalValueIsPositive
	
	self assert: 50 equals: (self withdrawalFor: 50) amount
! !

!methodRemoval: SimpleAccountTest #test04WithdrawalValueIsPositiveFIX stamp: 'IB 5/22/2023 16:40:31'!
test04WithdrawalValueIsPositiveFIX
	
	self assert: 50 equals: (self withdrawalFor: 50) amount
!

----SNAPSHOT----(22 May 2023 16:40:35) CuisUniversity-5706.image priorSource: 8946449!

----QUIT----(22 May 2023 16:40:50) CuisUniversity-5706.image priorSource: 8947013!